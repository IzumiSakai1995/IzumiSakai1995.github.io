<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Izumi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-17T09:28:10.729Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>IzumiSakai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CAP理论</title>
    <link href="http://yoursite.com/2019/04/17/CAP%E7%90%86%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/04/17/CAP理论/</id>
    <published>2019-04-17T01:21:21.000Z</published>
    <updated>2019-04-17T09:28:10.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>CAP指Consistence一致性、Availability可用性、Partition-tolerance分区可容忍性，普遍被当作是大数据技术的理论基础。一个分布式只能同时满足其中两项</p><h3 id="Consistence"><a href="#Consistence" class="headerlink" title="Consistence"></a>Consistence</h3><p>一致性指分布式服务器的数据一致性，即更新操作成功后所有结点在同一时间的数据完全一致。对于一致性，可以分为从客户端和服务端两个不同的视角，从客户端看，一致性主要指的是多并发访问更新过的数据，在不同进程如何获取的问题。从服务端来看，则是更新如何复制到整个分布式系统，以保证数据一致性。</p><h4 id="三种一致性策略"><a href="#三种一致性策略" class="headerlink" title="三种一致性策略"></a>三种一致性策略</h4><ol><li>对于关系型数据库，需求更新后的数据能被后续的访问看到，这是强一致性。</li><li>如果能容忍后续访问不到，是弱一致性</li><li>如果经过一段时间后能访问到更新后的数据，这是最终一致性</li></ol><p>CAP中的不能同时满足是指的强一致性。</p><h3 id="Availability"><a href="#Availability" class="headerlink" title="Availability"></a>Availability</h3><p>可用性指服务一直可用，而且是正常响应时间。通过停机时间来来计算可用性。好的可用性主要是指系统能很好的为用户服务，不出现用户操作失败或者访问超时等不好的情况。</p><h3 id="Parition-Tolerance"><a href="#Parition-Tolerance" class="headerlink" title="Parition Tolerance"></a>Parition Tolerance</h3><p>分区容错性是指在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。</p><p>分区容错性和可扩展性</p><h2 id="CAP权衡"><a href="#CAP权衡" class="headerlink" title="CAP权衡"></a>CAP权衡</h2><h3 id="CP"><a href="#CP" class="headerlink" title="CP"></a>CP</h3><p>指一个分布式系统不要求强的可用性，即容许系统停机或者长时间无相应的话就可以保障CP舍弃A。</p><p>保证CP舍弃A的系统一旦发生网络故障或者消息丢失等情况，就要牺牲用户的体验，等到所有数据恢复一致之后再让用户访问系统。</p><p>典型例子是分布式数据库，发生极端情况时，优先保证数据一致性。如Redis,HBase等，还有分布式中常用的Zookeeper。</p><h3 id="AP"><a href="#AP" class="headerlink" title="AP"></a>AP</h3><p>要求高可用并允许分区，则需放弃一致性，一旦网络问题发生， 节点之间可能会失去联系，为了保证高可用，需要在用户访问时可以马上得到返回，则每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。</p><p>常用案例是淘宝和12306买票等，舍弃数据库的强一致性，而选择最终一致性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CAP&quot;&gt;&lt;a href=&quot;#CAP&quot; class=&quot;headerlink&quot; title=&quot;CAP&quot;&gt;&lt;/a&gt;CAP&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p
      
    
    </summary>
    
      <category term="CAP" scheme="http://yoursite.com/categories/CAP/"/>
    
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="CAP" scheme="http://yoursite.com/tags/CAP/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://yoursite.com/2019/04/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/04/08/设计模式/</id>
    <published>2019-04-08T06:37:15.000Z</published>
    <updated>2019-04-10T02:53:16.423Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单例模式-singleton"><a href="#单例模式-singleton" class="headerlink" title="单例模式-singleton"></a>单例模式-singleton</h4><p>确保某一个类只有一个实例，并且提供一个全局访问点，单例模式具备典型的三个特点：</p><ol><li>只有一个实例</li><li>自我实例化</li><li>提供共全局访问点</li></ol><p>当系统中只需要一个实例对象或者系统中只允许一个公共访问点，除了这个公共访问点外，不能通过其他访问点访问该实例时，可以使用单例模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 单元素的枚举类型已经成为实现Singleton的最佳方法。</span></span><br></pre></td></tr></table></figure><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>提供一个接口，用于创建相关或者依赖对象的家族，而不需要明确指定具体类。他允许客户端使用抽象的接口来创建一组相关的产品，而不需要关系实际产出的具体产品是什么。这样可以就可以从具体的产品中被解耦。它的有点是隔离了具体类的生成，使得客户端不需要知道什么被创建了，而缺点就在于新增新的行为会比较麻烦，因为当添加一个新的产品对象时，需要更改接口及其下所有子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工厂抽象接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function">Fruit <span class="title">createFruit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Vegetable <span class="title">createVegetable</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//蔬菜抽象接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vegetable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">vegetableInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//水果抽象接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fruitInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体类：北方水果</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NorthFruit</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fruitInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"North-Apple"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体类：南方水果</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SouthFruit</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fruitInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"South-Banana"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体类：北方蔬菜</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NorthVegetable</span> <span class="keyword">implements</span> <span class="title">Vegetable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">vegetableInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"North-Tomato"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体类：南方蔬菜</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SouthVegetable</span> <span class="keyword">implements</span> <span class="title">Vegetable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">vegetableInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"South-Taro"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体类：北方产品工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NorthProductFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">createFruit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NorthFruit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vegetable <span class="title">createVegetable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NorthVegetable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体类：南方产品工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SouthProductFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">createFruit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SouthFruit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vegetable <span class="title">createVegetable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SouthVegetable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Factory northFactory = <span class="keyword">new</span> NorthProductFactory();</span><br><span class="line">        Factory southFactory = <span class="keyword">new</span> SouthProductFactory();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"北方产品："</span>);</span><br><span class="line">        northFactory.createFruit().fruitInfo();</span><br><span class="line">        northFactory.createVegetable().vegetableInfo();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"南方产品："</span>);</span><br><span class="line">        southFactory.createFruit().fruitInfo();</span><br><span class="line">        southFactory.createVegetable().vegetableInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，也就是说工厂方法模式让实例化推迟到子类。工厂方法模式非常符合“开闭原则”，当需要增加一个新的产品时，我们只需要增加一个具体的产品和与之对应的具体工厂即可，无需修改原有系统。同时在工厂方法模式中用户只需要知道生产产品的具体工厂即可，无需关心产品的创建过程，甚至连具体的产品类名称都不需要知道。缺点每新增一个产品需要增加两个类，导致系统复杂度增加。</p><ol><li>抽象产品：产品对象统一的基类，或者是统一的接口。</li><li>具体的产品：各个不同的实例对象类</li><li>抽象工厂：所有的子类工厂类的积累，或是统一的接口。</li><li>具体的工厂子类：负责每个不同的产品对象的实际创建</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象产品类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getWork</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实际产品类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bike</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"by bike"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"by bus"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象工厂接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体工厂子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BikeFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bike();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CarFactory carFactory = <span class="keyword">null</span>;</span><br><span class="line">        carFactory = <span class="keyword">new</span> BikeFactory();</span><br><span class="line">        Car bike =  carFactory.getCar();</span><br><span class="line">        bike.getWork();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// bus</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4><p>主要将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。建造者模式将复杂产品的构建过程封装分解在不同的方法中，使得创建过程非常清晰，能够让我们更加精确的控制复杂产品对象的创建过程，同时它隔离了复杂产品对象的创建和使用。使得相同的创建过程能够创建不同的产品。但是如果某个产品的内部结构过于复杂，将会导致整个系统非常庞大，不利于控制，同时若几个产品之间存在较大的差异，则不适用建造者模式，毕竟这个世界上存在相同点大的两个产品并不是很多。</p><ol><li>builder：为创建一个产品对象的各个部件指定抽象接口。</li><li>ConcreteBuilder：实现Builder的接口以构造和装配该产品的各个部件，定义并明确它所创建的表示，并提供一个检索产品的接口</li><li>Director：构造一个使用Builder接口的对象</li><li>Product：表示被构造的复杂对象。ConcreteBuilder创建该产品的内部表示并定义它的装配过程，包含定义组成部件的类，包括将这些部件装配成最终产品的接口。</li></ol><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p>在我们应用程序可能有某些对象的结构比较复杂，但是我们又需要频繁的使用它们，如果这个时候我们来不断的新建这个对象势必会大大损耗系统内存的，这个时候我们需要使用原型模式来对这个结构复杂又要频繁使用的对象进行克隆。所以原型模式就是用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。</p><p>它主要应用与那些创建新对象的成本过大时。它的主要优点就是简化了新对象的创建过程，提高了效率，同时原型模式提供了简化的创建结构</p><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ol><li>资源优化场景</li><li>类初始化需要消耗非常多的资源、包括数据、硬件等。</li><li>性能和安全要求的场景</li><li>通过new产生一个对象需要非常繁琐的数据准备或访问权限</li><li>一个对象多个修改者的场景</li><li>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值，可考虑使用原型模式拷贝多个对象供调用者使用</li><li>在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过clone的方法创建一个对象，然后由工厂方法提供给调用者。</li></ol><p><strong>注意事项：</strong>与通过对一个类进行实例化来构建对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅复制实现cloneable，重写clone方法，深复制是通过实现Serializable读取二进制流。</p><h5 id="浅复制实现"><a href="#浅复制实现" class="headerlink" title="浅复制实现"></a>浅复制实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Prototype <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Prototype prototype = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            prototype = (Prototype) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="深复制实现"><a href="#深复制实现" class="headerlink" title="深复制实现"></a>深复制实现</h5><h5 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h5><p>原型模式包含如下角色</p><ol><li>Prototype：抽象原型类</li><li>concrete prototype：具体原型类</li><li>client：客户类</li></ol><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>在我们的应用程序中我们可能需要将两个不同接口的类来进行通信，在不修改这两个的前提下我们可能会需要某个中间件来完成这个衔接的过程。这个中间件就是适配器。所谓适配器模式就是将一个类的接口，转换成客户期望的另一个接口。它可以让原本两个不兼容的接口能够无缝完成对接。</p><p>作为中间件的适配器将目标类和适配者解耦，增加了类的透明性和可复用性。</p><p>适配器模式包含如下角色：</p><ol><li>Target：目标抽象类</li><li>Adapter：适配器类</li><li>Adaptee：适配者类</li><li>Client：客户类</li></ol><h4 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h4><p>如果说某个系统能够从多个角度来进行分类，且每一种分类都可能会变化，那么我们需要做的就是讲这多个角度分离出来，使得他们能独立变化，减少他们之间的耦合，这个分离过程就使用了桥接模式。所谓桥接模式就是讲抽象部分和实现部分隔离开来，使得他们能够独立变化。</p><p>桥接模式将继承关系转化成关联关系，封装了变化，完成了解耦，减少了系统中类的数量，也减少了代码量。</p><p>桥接模式包含如下角色：</p><ol><li>Abstraction：抽象类</li><li>RefinedAbstraction：扩充抽象类</li><li>Implement：实现类接口</li><li>ConcreteImplementor：具体实现类</li></ol><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;单例模式-singleton&quot;&gt;&lt;a href=&quot;#单例模式-singleton&quot; class=&quot;headerlink&quot; title=&quot;单例模式-singleton&quot;&gt;&lt;/a&gt;单例模式-singleton&lt;/h4&gt;&lt;p&gt;确保某一个类只有一个实例，并且提供一个全局访
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="http://yoursite.com/2019/04/04/%E5%8F%8D%E5%B0%84/"/>
    <id>http://yoursite.com/2019/04/04/反射/</id>
    <published>2019-04-04T06:11:16.000Z</published>
    <updated>2019-04-04T07:28:17.144Z</updated>
    
    <content type="html"><![CDATA[<h3 id="通过反射查看类信息"><a href="#通过反射查看类信息" class="headerlink" title="通过反射查看类信息"></a>通过反射查看类信息</h3><p>Java程序中许多对象在运行时都会出现两种类型：编译时类型和运行时类型，列如代码：Person p = new Sudent()，该变脸编译时类型为Person，运行时类型为Student；除此之外，程序在运行时接收到外部传入的一个对象，该对象的编译时类型是Obeject，但程序又需要调用该对象运行时类型的方法。</p><h4 id="获得Class对象"><a href="#获得Class对象" class="headerlink" title="获得Class对象"></a>获得Class对象</h4><p>每个类在加载之后，系统就会为该类生成一个对应的Class对象，通过该Class对象就可以访问到JVM中的这个类。在Java程序中获取Class对象通常有如下方式：</p><ol><li>使用Class类的forName(String name)静态方法。该方法需要传入字符串参数，该字符串参数的值是某个类的全限定类名（必须添加完整包名）。</li><li>调用某个类的class属性来获取该类对应的Class对象。列如，Person.class将会返回Person类对应的Class对象。</li><li>调用某个对象的getClass()方法。该方法是java.lang.Object类中的一个方法，所有Java对象都可以调用该方法，该方法会直接返回该对象所属类的Class对象。</li></ol><p>大部分时候选用第二种方式来获取指定类的Class对象。代码更安全(程序在预编译阶段就可以检查需要访问的Class对象是否存在)，程序性能更好(无需调用方法)。一旦获得了某个类对应的Class对象之后，程序就可以调用Class对象的方法来获得该对象和该类的真实信息了。</p><h4 id="从Class中获取信息"><a href="#从Class中获取信息" class="headerlink" title="从Class中获取信息"></a>从Class中获取信息</h4><p>Class类提供大量实例方法来获取该Class对象所对应的类的详细信息，Class类大致包含如下方法，下面每个方法都可能包括多个重载的版本，应该查阅API文档来掌握它们。</p><h5 id="获取Class对应类所包含的构造器"><a href="#获取Class对应类所包含的构造器" class="headerlink" title="获取Class对应类所包含的构造器"></a>获取Class对应类所包含的构造器</h5><ol><li>Constructor<t> getConstructor(Class&lt;?&gt;…parameterTypes)：返回此Class对应类的、带指定形参列表的public构造器</t></li><li>Constructor&lt;?&gt;[] getConstructors()：返回此Class对应类的所有public构造器</li><li>Constructor<t>  getDeclaredConstructor(Class&lt;?&gt; …parameterTypes)：返回此Class对应的类的带指定形参列表的构造器，与访问权限无关</t></li><li>Constructor&lt;?&gt;[] getDeclaredConstructors()：返回此Class对应类的所有构造器，与访问权限无关</li></ol><h5 id="获取Class对应类所包含-的方法"><a href="#获取Class对应类所包含-的方法" class="headerlink" title="获取Class对应类所包含 的方法"></a>获取Class对应类所包含 的方法</h5><ol><li>Method getMethod(String name,Class&lt;?&gt;…parameterTypes)：返回此Class对应类的带指定形参列表的public方法。</li><li>Method[] getMethods()：返回此Class对应类的所有public方法。</li><li>Method  getDeclaredMethod(String name,Class&lt;?&gt; …parameterTypes)：返回此Class对应的类的带指定形参列表的方法，与访问权限无关</li><li>Method[] getDeclaredMethods()：返回此Class对应类的所有方法，与访问权限无关</li></ol><h5 id="获取Class对应类所包含的成员变量"><a href="#获取Class对应类所包含的成员变量" class="headerlink" title="获取Class对应类所包含的成员变量"></a>获取Class对应类所包含的成员变量</h5><ol><li>Field getField(String name)：返回此Class对应类的指定名称的public成员变量。</li><li>Field[] getFields()：返回此Class对应类的所有public成员变量。</li><li>Field  getDeclaredField(String name)：返回此Class对应的类的指定名称的成员变量，与访问权限无关</li><li>Field[] getDeclaredMethods()：返回此Class对应类的所有成员变量，与访问权限无关</li></ol><h5 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h5><p>​    1getName()：返回String形式的该类的名称。<br>　　2 newInstance()：根据某个Class对象产生其对应类的实例，它调用的是此类的默认构造方法(没有默认无参构造器会报错)<br>　　3 getClassLoader()：返回该Class对象对应的类的类加载器。<br>　　4 getSuperClass()：返回某子类所对应的直接父类所对应的Class对象<br>　　5 isArray()：判定此Class对象所对应的是否是一个数组对象<br>　　6 getComponentType() ：如果当前类表示一个数组，则返回表示该数组组件的 Class 对象，否则返回 null。<br>　　7 getConstructor(Class[]) :返回当前 Class 对象表示的类的指定的公有构造子对象。<br>　　8 getConstructors() :返回当前 Class 对象表示的类的所有公有构造子对象数组。<br>　　9 getDeclaredConstructor(Class[]) :返回当前 Class 对象表示的类的指定已说明的一个构造子对象。<br>　　10 getDeclaredConstructors() :返回当前 Class 对象表示的类的所有已说明的构造子对象数组。<br>　　11 getDeclaredField(String) :返回当前 Class 对象表示的类或接口的指定已说明的一个域对象。<br>　　12 getDeclaredFields() :返回当前 Class 对象表示的类或接口的所有已说明的域对象数组。<br>　　13 getDeclaredMethod(String, Class[]) :返回当前 Class 对象表示的类或接口的指定已说明的一个方法对象。<br>　　14 getDeclaredMethods() :返回 Class 对象表示的类或接口的所有已说明的方法数组。<br>　　15 getField(String) :返回当前 Class 对象表示的类或接口的指定的公有成员域对象。<br>　　16 getFields() :返回当前 Class 对象表示的类或接口的所有可访问的公有域对象数组。<br>　　17 getInterfaces() :返回当前对象表示的类或接口实现的接口。<br>　　18 getMethod(String, Class[]) :返回当前 Class 对象表示的类或接口的指定的公有成员方法对象。<br>　　19 getMethods() :返回当前 Class 对象表示的类或接口的所有公有成员方法对象数组，包括已声明的和从父类继承的方法。<br>　　20 isInstance(Object) :此方法是 Java 语言 instanceof 操作的动态等价方法。<br>　　21 isInterface() :判定指定的 Class 对象是否表示一个接口类型<br>　　22 isPrimitive() :判定指定的 Class 对象是否表示一个 Java 的基类型。<br>　　23 newInstance() ：创建类的新实例</p><h4 id="使用反射生成并操作对象"><a href="#使用反射生成并操作对象" class="headerlink" title="使用反射生成并操作对象"></a>使用反射生成并操作对象</h4><h5 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h5><ol><li>使用Class对象的newInstance()方法来创建该Class对象对应类的实例，这种方式要求该Class对象的对应类有默认构造器，而执行newInstance()方法时实际上是利用默认构造器来创建该类的实例</li><li>先使用Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建该Class对象对应类的实例。通过这种方式可以选择使用指定的构造器来创建实例。</li></ol><p>通过第一种方式来创建对象是比较常见的情景，因为在很多JAVAEE框架中都需要根据配置文件信息来创建Java对象，从配置文件读取的只是某个类的字符串类名，程序需要根据字符串来创建对应的实例，就必须使用反射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 反射创建对象;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现一个简单的对象池，该对象池会根据配置文件读取key-value对，然后创建这些对象，并把这些对象放入一个HashMap中。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> IzumiSakai</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectPoolFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个对象池，前面是对象名，后面是实际对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; objectPool = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个创建对象的方法，该方法只要传入一个字符串，程序可以根据该类名生成Java对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazzName 字符串类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> clazz 对应类的默认构造器创建的实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">createObject</span><span class="params">(String clazzName)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(clazzName);</span><br><span class="line">        <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法根据指定文件来初始化对象池</span></span><br><span class="line"><span class="comment">     * 它会根据配置文件来创建对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPool</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> ( FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(fileName))&#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(fileInputStream);</span><br><span class="line">            <span class="keyword">for</span> (String name : properties.stringPropertyNames())&#123;</span><br><span class="line">                <span class="comment">// 每取出一对key-value对就根据value创建一个对象。</span></span><br><span class="line">                <span class="comment">// 调用createObject创建对象并将对象添加到对象池中</span></span><br><span class="line">                objectPool.put(name,createObject(name));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException ie)&#123;</span><br><span class="line">            System.out.println(<span class="string">"读取"</span> + fileName + <span class="string">"异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectPool.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ObjectPoolFactory objectPoolFactory = <span class="keyword">new</span> ObjectPoolFactory();</span><br><span class="line">        objectPoolFactory.initPool(<span class="string">"obj.txt"</span>);</span><br><span class="line">        System.out.println(objectPoolFactory.getObject(<span class="string">"a"</span>));</span><br><span class="line">        System.out.println(objectPoolFactory.getObject(<span class="string">"b"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用反射生成JDK动态代理"><a href="#使用反射生成JDK动态代理" class="headerlink" title="使用反射生成JDK动态代理"></a>使用反射生成JDK动态代理</h4><p>在Java的java.lang.reflect包下提供了一个Proxy类和一个InvocationHandler接口，通过使用这个类和接口可以生成JDK动态代理类或动态代理对象。</p><h5 id="创建动态代理"><a href="#创建动态代理" class="headerlink" title="创建动态代理"></a>创建动态代理</h5><p>Proxy提供了用于创建动态代理类和代理对象的静态方法，它也是所有动态代理类的父类。如果在程序中为一个或多个接口动态的生成实现类，就可以使用Proxy来创建动态代理类；如果要为一个或多个接口动态地创建实例，也可以使用Proxy来创建动态代理实例。</p><p>Proxy提供如下俩方法来创建动态代理类和动态代理实例</p><ol><li>static Class&lt;?&gt; getProxyClass(ClassLoader loader,Class &lt;?>…interfaces)：创建一个动态代理类所对应的Class对象，该代理类将实现interfaces所指定的多个接口。第一个ClassLoader参数指定生成动态代理类的类加载器。</li><li>static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,invocationHandler h)：直接创建一个动态代理对象，该代理对象的实现类实现了interfaces指定的系列接口，执行代理对象的每个方法都会被替换成执行InvocationHandler对象的invoke方法.</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;通过反射查看类信息&quot;&gt;&lt;a href=&quot;#通过反射查看类信息&quot; class=&quot;headerlink&quot; title=&quot;通过反射查看类信息&quot;&gt;&lt;/a&gt;通过反射查看类信息&lt;/h3&gt;&lt;p&gt;Java程序中许多对象在运行时都会出现两种类型：编译时类型和运行时类型，列如代码：P
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>类加载机制</title>
    <link href="http://yoursite.com/2019/04/04/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/04/04/类加载机制/</id>
    <published>2019-04-04T01:55:36.000Z</published>
    <updated>2019-04-04T03:37:29.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h3><p>JVM的类加载机制主要由三种</p><ol><li>全盘负责：当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另一个类加载器来载入。</li><li>父类委托：先让父类加载器试图加载该Class,只有在父类加载器无法加载该类时，才尝试从自己的类路径中加载该类。</li><li>缓存机制：缓存机制会保证所有加载过的Class都会被缓存，当程序中需要使用到某个Class时，类加载器先从缓存区中搜寻该Class,只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区中。所以当修改了Class之后，必须重启JVM使修改生效。</li></ol><p>类加载器加载Class的大致步骤：</p><ol><li>检测缓存区中是否存在此Class，如果有，进入第8步</li><li>如果父类加载器不存在，则执行4，不存在则执行3</li><li>请求使用父类加载器区载入目标类，如果成功载入则跳到第8步，否则执行第5步。</li><li>请求使用根类加载器来载入目标类，如果成功载入则跳到第8步，否则跳到第7步。</li><li>当前类加载器尝试寻找Class文件，如果找到执行第6步，如果找不到则跳到第7步。</li><li>从文件中载入Class，成功载入后跳到第8步</li><li>抛出ClassNotFoundException异常</li><li>返回对应的java.lang.Class对象</li></ol><p>注：其中第5、6步允许重写ClassLoader的find Class()方法来实现自己的载入策略，甚至重写loadClass()方法来实现自己的载入过程。</p><h3 id="创建并使用自定义的类加载器"><a href="#创建并使用自定义的类加载器" class="headerlink" title="创建并使用自定义的类加载器"></a>创建并使用自定义的类加载器</h3><p>JVM中除了根类加载器之外的所有类加载器都是ClassLoader的子类的实例，开发者可以通过扩展ClassLoader的子类，并重写该ClassLoader所包含的方法来实现自定义的类加载器。</p><p>ClassLoader类中有如下两个关键方法</p><ol><li>loadClass(String name,boolean resolve)：该方法为ClassLoader的入口点，根据指定名称来加载类，系统就是调用ClassLoader的该方法来获取指定类对应的Class对象。</li><li>findClass(String name)：根据指定名称来查找类</li></ol><p>需要实现自定义ClassLoader，则可以通过重写上述两方法实现，通常退件重写findClass()方法，而不是loadClass()方法</p><p>loadClass()方法的执行步骤：</p><ol><li>用findLoadedClass(String) 来检查是否已经加载类，如果已经加载则返回</li><li>在父类加载器上调用loadClass()方法，如果父类加载器为null,则使用根类加载器来加载。</li><li>调用findClass(String)方法查找类。</li></ol><p>重写findClass()方法可以避免覆盖默认类加载器的父类委托，缓冲机制两种策略；如果重写loadClass()方法，则实现逻辑更为复杂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> IzumiSakai</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompileClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getBytes(String fileName) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">        <span class="keyword">long</span> len = file.length();</span><br><span class="line">        <span class="keyword">byte</span>[] raw = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) len];</span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 一次性读取class文件的全部二进制数据</span></span><br><span class="line">                <span class="keyword">int</span> r = fileInputStream.read(raw);</span><br><span class="line">                <span class="keyword">if</span> (r != len)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"无法读取全部文件"</span> + r + <span class="string">"!="</span> + len);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> raw;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 定义编译指定文件的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">compile</span><span class="params">(String javaFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CompileClassLoad:正在编译"</span>+javaFile + <span class="string">"...."</span>);</span><br><span class="line">        <span class="comment">// 调用系统的javac命令</span></span><br><span class="line">        Process p = Runtime.getRuntime().exec(<span class="string">"javac"</span>+javaFile);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 其他线程等待该线程完成</span></span><br><span class="line">            p.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ie)&#123;</span><br><span class="line">            ie.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取javac线程的退出值</span></span><br><span class="line">        <span class="keyword">int</span> ret = p.exitValue();</span><br><span class="line">        <span class="comment">// 返回编译是否成功</span></span><br><span class="line">        <span class="keyword">return</span> ret==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重写ClassLoader的findClass方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">        Class clazz = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 将包路径中的.替换成斜线/</span></span><br><span class="line">        String fileStub = name.replace(<span class="string">"."</span>,<span class="string">"/"</span>);</span><br><span class="line">        String javaFileName = fileStub+<span class="string">".java"</span>;</span><br><span class="line">        String classFileName = fileStub + <span class="string">".class"</span>;</span><br><span class="line">        File javaFile = <span class="keyword">new</span> File(javaFileName);</span><br><span class="line">        File classFile = <span class="keyword">new</span> File(classFileName);</span><br><span class="line">        <span class="comment">// 当指定Java源文件存在，且Class文件不存在，或者Java源文件的修改时间比Class文件的修改时间更晚时，重新编译</span></span><br><span class="line">        <span class="keyword">if</span> (javaFile.exists() &amp;&amp; (!classFile.exists()) || javaFile.lastModified() &gt; classFile.lastModified())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 如果编译失败，或者该Class文件不存在</span></span><br><span class="line">                <span class="keyword">if</span> (!compile(javaFileName) || !classFile.exists())&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">"CLassNotFoundException"</span> + javaFileName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException ie)&#123;</span><br><span class="line">                ie.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果class文件 存在，系统负责将该文件转换成class对象</span></span><br><span class="line">        <span class="keyword">if</span> (classFile.exists())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将class文件的二进制读入数组</span></span><br><span class="line">                <span class="keyword">byte</span>[] raw = getBytes(classFileName);</span><br><span class="line">                <span class="comment">// 调用ClassLoader的defineClass方法将二进制数据转换成class对象</span></span><br><span class="line">                clazz = defineClass(name,raw,<span class="number">0</span>,raw.length);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ie)&#123;</span><br><span class="line">                ie.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果clazz为null，表明加载失败，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 如果运行该程序时没有参数，即没有目标类</span></span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"缺少目标类，请按如下格式运行java源文件:"</span>);</span><br><span class="line">            System.out.println(<span class="string">"java CompileClassLoader ClassName"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一个参数是需要运行的类</span></span><br><span class="line">        String progClass = args[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 剩下的参数将作为运行目标类时的参数</span></span><br><span class="line">        <span class="comment">// 将这些参数复制到一个新数组中</span></span><br><span class="line">        String[] progArgs = <span class="keyword">new</span> String [args.length - <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(args,<span class="number">1</span>,progArgs,<span class="number">0</span>, progArgs.length);</span><br><span class="line">        CompileClassLoader compileClassLoader = <span class="keyword">new</span> CompileClassLoader();</span><br><span class="line">        <span class="comment">// 加载需要运行的类</span></span><br><span class="line">        Class&lt;?&gt; clazz = compileClassLoader.loadClass(progClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取需要运行的类的主方法</span></span><br><span class="line">        Method main = clazz.getMethod(<span class="string">"main"</span>,(String[].class));</span><br><span class="line">        Object[] argsArray = &#123;progArgs&#125;;</span><br><span class="line">        main.invoke(<span class="keyword">null</span>,argsArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类加载机制&quot;&gt;&lt;a href=&quot;#类加载机制&quot; class=&quot;headerlink&quot; title=&quot;类加载机制&quot;&gt;&lt;/a&gt;类加载机制&lt;/h3&gt;&lt;p&gt;JVM的类加载机制主要由三种&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全盘负责：当一个类加载器负责加载某个Class时，该Clas
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>springboot</title>
    <link href="http://yoursite.com/2019/04/03/springboot/"/>
    <id>http://yoursite.com/2019/04/03/springboot/</id>
    <published>2019-04-03T02:05:10.000Z</published>
    <updated>2019-04-03T03:51:49.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="spring-boot配置文件"><a href="#spring-boot配置文件" class="headerlink" title="spring boot配置文件"></a>spring boot配置文件</h3><h4 id="application配置文件配置"><a href="#application配置文件配置" class="headerlink" title="application配置文件配置"></a>application配置文件配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port = 8080</span><br></pre></td></tr></table></figure><h4 id="spring-boot-java配置"><a href="#spring-boot-java配置" class="headerlink" title="spring boot java配置"></a>spring boot java配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletConfig</span> <span class="title">implementd</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 设置端口</span></span><br><span class="line">        factory.setPort(<span class="number">8080</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBoot静态资源"><a href="#SpringBoot静态资源" class="headerlink" title="SpringBoot静态资源"></a>SpringBoot静态资源</h3><h4 id="java配置"><a href="#java配置" class="headerlink" title="java配置"></a>java配置</h4><p>SpringBoot静态资源默认目录为/static、/public、/resources、和/META-INF/resources，默认映射路径都是/。SpringBoot会按照META/resources &gt; resources &gt; static &gt; public 的优先级寻找对应的资源文件并返回第一个找到的文件。</p><p>如果不想使用默认的配置可以配置自己的静态资源路径，通过实现WebMvcConfigurer接口的addResourceHandlers方法来自定义静态资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 重写addResourceHandlers 方法</span></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 设置静态资源映射路径为/**，资源位置为类路径小的upload</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"classpath:/upload/"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBoot事务控制"><a href="#SpringBoot事务控制" class="headerlink" title="SpringBoot事务控制"></a>SpringBoot事务控制</h3><h4 id="什么是数据库事务"><a href="#什么是数据库事务" class="headerlink" title="什么是数据库事务"></a>什么是数据库事务</h4><p>数据库事务(Database Transation)，是指作为单个逻辑工作单元执行的一系列操作，要么完全的执行，要么完全地不执行。事务处理可以确保除非事务性单元内所有操作都成功完成，否贼不会永久更新面向数据的资源。通过将一组相关的操作组合为一个要么成功要么失败的单元，可以简化错误回复并使应用程序更加可靠。一个逻辑工作单元要成为事务，必须满足所谓的ACID（原子性、一致性、隔离性、持久性）属性。事务是数据库运行中的逻辑工作单位，由DBMS中的事务管理子系统负责事务的处理。</p><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><h5 id="可串行化"><a href="#可串行化" class="headerlink" title="可串行化"></a>可串行化</h5><p>最高的隔离级别</p><p>在基于锁机制并发控制的DBMS实现可串行化，要求在选定对象上的读锁和写锁保持到事务结束后才能释放。在select的查询中使用一个“WHERE”子句来描述一个范围时应该获得一个“范围锁”（range-lock）。这种机制可以避免幻读。当采用不基于锁的并发控制时，不用获取锁。但当系统探测到几个并发事务有“写冲突”的时候，只有其中一个是允许提交的。这种机制的详细描述见”快照隔离”</p><h5 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h5><p>在<strong>可重复读（REPEATABLE READS）</strong>隔离级别中，基于锁机制并发控制的DBMS需要对选定对象的读锁和写锁一直保持到事务结束，但不要求“范围锁”，因此可能会发生幻读“”</p><h5 id="提交读"><a href="#提交读" class="headerlink" title="提交读"></a>提交读</h5><p>在<strong>提交读（READ COMMITTED）</strong>级别中，基于锁机制并发控制的DBMS需要对选定对象的写锁一直保持到事务结束，但是读锁在SELECT操作完成后马上释放。（因此“不可重复读”现象可能会发生）。和前一种隔离级别一样，也不要求范围锁。</p><h5 id="未提交读"><a href="#未提交读" class="headerlink" title="未提交读"></a>未提交读</h5><p><strong>未提交读（READ UNCOMMITTED）</strong>是最低的隔离级别。允许脏读，事务可以看到其他事务尚未提交的修改</p><ul><li>脏读：一个事务读取到了另一个事务没有提交的事务</li><li>不可重复读：一个事务对同一行记录读取两次得到不同的结果</li><li>幻读：一个事务两个相同的查询获得的结果不同</li></ul><h4 id="SpringBoot事务控制-1"><a href="#SpringBoot事务控制-1" class="headerlink" title="SpringBoot事务控制"></a>SpringBoot事务控制</h4><p>在Spring中，要进行事务管理有两种方式，一种是编程式事务，一种是声明式事务，但是都需要配置事务管理器。</p><p>而SpringBoot的事务管理十分简单，只需要一个@Transactional注解就可以了，当然必须是主流ORM框架。</p><h4 id="Spring-Boot-AOP-的运用"><a href="#Spring-Boot-AOP-的运用" class="headerlink" title="Spring Boot AOP 的运用"></a>Spring Boot AOP 的运用</h4><h4 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h4><p>Aop(aspect oriented programming)，意味面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</p><h4 id="如何使用AOP"><a href="#如何使用AOP" class="headerlink" title="如何使用AOP"></a>如何使用AOP</h4><p>常用注解：</p><ol><li>@Before：在方法执行前执行</li><li>@After：在方法执行后执行</li><li>@AfterReturning：在结果返回后执行</li><li>@AfterThrowing：在抛出异常后执行</li><li>@Around：环绕通知，相当于同时使用@Before和@After</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明为切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置切点</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(value = <span class="string">"execution(* com.shiyanlou.springboot..*.run(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"aop()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before：执行方法前"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"aop()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after：执行方法后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"aop()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterThrowing：异常抛出后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"aop()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterReturning：方法返回后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"aop()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"around：环绕通知前"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"around：环绕通知后"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用AOP进行事务控制"><a href="#使用AOP进行事务控制" class="headerlink" title="使用AOP进行事务控制"></a>使用AOP进行事务控制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置切点</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(value = <span class="string">"execution(* com.shiyanlou.springboot..*.run(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"aop()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before：执行方法前"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"aop()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after：执行方法后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"aop()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterThrowing：异常抛出后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"aop()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterReturning：方法返回后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"aop()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"around：环绕通知前"</span>);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">"around：环绕通知后"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入事务管理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager platformTransactionManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置事务拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionInterceptor <span class="title">transactionInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置事务属性 可以通过它设置事务的基本属性，如事务是读写事务或者只读事务，事务的超时时间等</span></span><br><span class="line">        DefaultTransactionAttribute defaultTransactionAttribute = <span class="keyword">new</span> DefaultTransactionAttribute();</span><br><span class="line">        <span class="comment">//设置为读写事务</span></span><br><span class="line">        defaultTransactionAttribute.setReadOnly(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//通过方法名匹配事务</span></span><br><span class="line">        NameMatchTransactionAttributeSource nameMatchTransactionAttributeSource = <span class="keyword">new</span> NameMatchTransactionAttributeSource();</span><br><span class="line">        <span class="comment">//为save方法添加事务，事务属性为defaultTransactionAttribute设置的属性</span></span><br><span class="line">        nameMatchTransactionAttributeSource.addTransactionalMethod(<span class="string">"save"</span>, defaultTransactionAttribute);</span><br><span class="line">        <span class="comment">//新建一个事务拦截器，使用platformTransactionManager作为事务管理器，拦截的方法为nameMatchTransactionAttributeSource中匹配到的方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransactionInterceptor(platformTransactionManager, nameMatchTransactionAttributeSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Advisor <span class="title">advisor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AspectJExpressionPointcut aspectJExpressionPointcut = <span class="keyword">new</span> AspectJExpressionPointcut();</span><br><span class="line">        <span class="comment">//execution 表达式 匹配save方法</span></span><br><span class="line">        aspectJExpressionPointcut.setExpression(<span class="string">"execution(* com.shiyanlou.springboot..*.save(..))"</span>);</span><br><span class="line">        <span class="comment">//返回aop切面，切面=切点+通知</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(aspectJExpressionPointcut, transactionInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;spring-boot配置文件&quot;&gt;&lt;a href=&quot;#spring-boot配置文件&quot; class=&quot;headerlink&quot; title=&quot;spring boot配置文件&quot;&gt;&lt;/a&gt;spring boot配置文件&lt;/h3&gt;&lt;h4 id=&quot;application配置
      
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合篇</title>
    <link href="http://yoursite.com/2019/03/20/springboot%E6%95%B4%E5%90%88%E7%AF%87/"/>
    <id>http://yoursite.com/2019/03/20/springboot整合篇/</id>
    <published>2019-03-20T08:30:46.000Z</published>
    <updated>2019-04-15T01:08:19.301Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>在 <code>pom.xml</code> 文件中引入 <code>druid-spring-boot-starter</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入数据库连接依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://ip:port/dbname?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">      test-on-borrow:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># MySQL 8.x: com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h4 id="配置tk-mybatis"><a href="#配置tk-mybatis" class="headerlink" title="配置tk.mybatis"></a>配置tk.mybatis</h4><p>tk.mybatis 是在 MyBatis 框架的基础上提供了很多工具，让开发更加高效</p><h5 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h5><p>在 <code>pom.xml</code> 文件中引入 <code>mapper-spring-boot-starter</code> 依赖，该依赖会自动引入 MyBaits 相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置application-yml-1"><a href="#配置application-yml-1" class="headerlink" title="配置application.yml"></a>配置application.yml</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">    type-aliases-package:</span> <span class="string">实体类的存放路径，如：com.funtl.hello.spring.boot.entity</span></span><br><span class="line"><span class="attr">    mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><h5 id="创建一个通用的父级接口"><a href="#创建一个通用的父级接口" class="headerlink" title="创建一个通用的父级接口"></a>创建一个通用的父级接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.funtl.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.MySqlMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自己的 Mapper</span></span><br><span class="line"><span class="comment"> * 特别注意，该接口不能被扫描到，否则会出错</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: MyMapper&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lusifer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/5/29 0:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">MySqlMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="整合PageHelper"><a href="#整合PageHelper" class="headerlink" title="整合PageHelper"></a>整合PageHelper</h4><p>PageHelper 是 Mybatis 的分页插件，支持多数据库、多数据源。可以简化数据库的分页查询操作，整合过程也极其简单，只需引入依赖即可。</p><h5 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h5><p>在 <code>pom.xml</code> 文件中引入 <code>pagehelper-spring-boot-starter</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用-MyBatis-的-Maven-插件生成代码"><a href="#使用-MyBatis-的-Maven-插件生成代码" class="headerlink" title="使用 MyBatis 的 Maven 插件生成代码"></a>使用 MyBatis 的 Maven 插件生成代码</h4><p>我们无需手动编写 实体类、DAO、XML 配置文件，只需要使用 MyBatis 提供的一个 Maven 插件就可以自动生成所需的各种文件便能够满足基本的业务需求，如果业务比较复杂只需要修改相关文件即可。</p><h5 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h5><p>在 <code>pom.xml</code> 文件中增加 <code>mybatis-generator-maven-plugin</code> 插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>configurationFile：自动生成所需的配置文件路径</li></ul><h5 id="自动生成的配置"><a href="#自动生成的配置" class="headerlink" title="自动生成的配置"></a>自动生成的配置</h5><p>在 <code>src/main/resources/generator/</code> 目录下创建 <code>generatorConfig.xml</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入数据库连接配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"Mysql"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 配置 tk.mybatis 插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"tk.mybatis.mapper.generator.MapperPlugin"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappers"</span> <span class="attr">value</span>=<span class="string">"com.funtl.utils.MyMapper"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span></span></span><br><span class="line"><span class="tag">                <span class="attr">driverClass</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">connectionURL</span>=<span class="string">"$&#123;jdbc.connectionURL&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">userId</span>=<span class="string">"$&#123;jdbc.username&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">password</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置实体类存放路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.funtl.hello.spring.boot.entity"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置 XML 存放路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置 DAO 存放路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetPackage</span>=<span class="string">"com.funtl.hello.spring.boot.mapper"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置需要指定生成的数据库和表，% 代表所有表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">catalog</span>=<span class="string">"myshop"</span> <span class="attr">tableName</span>=<span class="string">"%"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- mysql 配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"Mysql"</span> <span class="attr">identity</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h5><p>在 <code>src/main/resources</code> 目录下创建 <code>jdbc.properties</code> 数据源配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># MySQL 8.x: com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.driverClass=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.connectionURL=jdbc:mysql://ip:port/dbname?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure><h5 id="插件自动生成命令"><a href="#插件自动生成命令" class="headerlink" title="插件自动生成命令"></a>插件自动生成命令</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn mybatis-generator:generate</span><br></pre></td></tr></table></figure><h6 id="完整配置案例"><a href="#完整配置案例" class="headerlink" title="完整配置案例"></a>完整配置案例</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用$&#123;propertyKey&#125;的方式来引用配置项</span></span><br><span class="line"><span class="comment">    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        </span></span><br><span class="line"><span class="comment">    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.</span></span><br><span class="line"><span class="comment">    注意，两个属性只能选址一个;</span></span><br><span class="line"><span class="comment">    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用</span></span><br><span class="line"><span class="comment">&lt;properties resource="" url="" /&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 在MBG工作的时候，需要额外加载的依赖包</span></span><br><span class="line"><span class="comment">     location属性指明加载jar/zip包的全路径</span></span><br><span class="line"><span class="comment">&lt;classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" /&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    context:生成一组对象的环境 </span></span><br><span class="line"><span class="comment">    id:必选，上下文id，用于在生成错误时提示</span></span><br><span class="line"><span class="comment">    defaultModelType:指定生成对象的样式</span></span><br><span class="line"><span class="comment">        1，conditional：类似hierarchical；</span></span><br><span class="line"><span class="comment">        2，flat：所有内容（主键，blob）等全部生成在一个对象中；</span></span><br><span class="line"><span class="comment">        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)</span></span><br><span class="line"><span class="comment">    targetRuntime:</span></span><br><span class="line"><span class="comment">        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；</span></span><br><span class="line"><span class="comment">        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；</span></span><br><span class="line"><span class="comment">    introspectedColumnImpl：类全限定名，用于扩展MBG</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"mysql"</span> <span class="attr">defaultModelType</span>=<span class="string">"hierarchical"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> &gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；</span></span><br><span class="line"><span class="comment">        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoDelimitKeywords"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生成的Java文件的编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化java代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFormatter"</span> <span class="attr">value</span>=<span class="string">"org.mybatis.generator.api.dom.DefaultJavaFormatter"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化XML代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xmlFormatter"</span> <span class="attr">value</span>=<span class="string">"org.mybatis.generator.api.dom.DefaultXmlFormatter"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 必须要有的，使用这个配置链接数据库</span></span><br><span class="line"><span class="comment">        @<span class="doctag">TODO:</span>是否可以扩展</span></span><br><span class="line"><span class="comment">        # MySQL 8.x: com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql:///pss"</span> <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"admin"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- java类型处理器 </span></span><br><span class="line"><span class="comment">        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；</span></span><br><span class="line"><span class="comment">        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型</span></span><br><span class="line"><span class="comment">            false：默认,</span></span><br><span class="line"><span class="comment">                scale&gt;0;length&gt;18：使用BigDecimal;</span></span><br><span class="line"><span class="comment">                scale=0;length[10,18]：使用Long；</span></span><br><span class="line"><span class="comment">                scale=0;length[5,9]：使用Integer；</span></span><br><span class="line"><span class="comment">                scale=0;length&lt;5：使用Short；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- java模型创建器，是必须要的元素</span></span><br><span class="line"><span class="comment">        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类</span></span><br><span class="line"><span class="comment">        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；</span></span><br><span class="line"><span class="comment">        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.domain"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  for MyBatis3/MyBatis3Simple</span></span><br><span class="line"><span class="comment">            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- for MyBatis3 / MyBatis3Simple</span></span><br><span class="line"><span class="comment">            是否创建一个不可变的类，如果为true，</span></span><br><span class="line"><span class="comment">            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"immutable"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 设置一个根对象，</span></span><br><span class="line"><span class="comment">            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项</span></span><br><span class="line"><span class="comment">            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：</span></span><br><span class="line"><span class="comment">                1，属性名相同，类型相同，有相同的getter/setter方法；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rootClass"</span> <span class="attr">value</span>=<span class="string">"com._520it.mybatis.domain.BaseDomain"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 生成SQL map的XML文件生成器，</span></span><br><span class="line"><span class="comment">        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），</span></span><br><span class="line"><span class="comment">            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置</span></span><br><span class="line"><span class="comment">        targetPackage/targetProject:同javaModelGenerator</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 </span></span><br><span class="line"><span class="comment">        targetPackage/targetProject:同javaModelGenerator</span></span><br><span class="line"><span class="comment">        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：</span></span><br><span class="line"><span class="comment">            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；</span></span><br><span class="line"><span class="comment">            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；</span></span><br><span class="line"><span class="comment">            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；</span></span><br><span class="line"><span class="comment">        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.mapper"</span> <span class="attr">type</span>=<span class="string">"ANNOTATEDMAPPER"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查</span></span><br><span class="line"><span class="comment">        &lt;property name="rootInterface" value=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素</span></span><br><span class="line"><span class="comment">        选择的table会生成一下文件：</span></span><br><span class="line"><span class="comment">        1，SQL map文件</span></span><br><span class="line"><span class="comment">        2，生成一个主键类；</span></span><br><span class="line"><span class="comment">        3，除了BLOB和主键的其他字段的类；</span></span><br><span class="line"><span class="comment">        4，包含BLOB的类；</span></span><br><span class="line"><span class="comment">        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；</span></span><br><span class="line"><span class="comment">        6，Mapper接口（可选）</span></span><br><span class="line"><span class="comment">        tableName（必要）：要生成对象的表名；</span></span><br><span class="line"><span class="comment">        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会</span></span><br><span class="line"><span class="comment">            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：</span></span><br><span class="line"><span class="comment">            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；</span></span><br><span class="line"><span class="comment">            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；</span></span><br><span class="line"><span class="comment">            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；</span></span><br><span class="line"><span class="comment">            4，否则，使用指定的大小写格式查询；</span></span><br><span class="line"><span class="comment">        另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；</span></span><br><span class="line"><span class="comment">        这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；</span></span><br><span class="line"><span class="comment">        可选：</span></span><br><span class="line"><span class="comment">        1，schema：数据库的schema；</span></span><br><span class="line"><span class="comment">        2，catalog：数据库的catalog；</span></span><br><span class="line"><span class="comment">        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName</span></span><br><span class="line"><span class="comment">        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；</span></span><br><span class="line"><span class="comment">        5，enableInsert（默认true）：指定是否生成insert语句；</span></span><br><span class="line"><span class="comment">        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；</span></span><br><span class="line"><span class="comment">        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；</span></span><br><span class="line"><span class="comment">        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；</span></span><br><span class="line"><span class="comment">        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；</span></span><br><span class="line"><span class="comment">        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；</span></span><br><span class="line"><span class="comment">        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；</span></span><br><span class="line"><span class="comment">        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；</span></span><br><span class="line"><span class="comment">        13，modelType：参考context元素的defaultModelType，相当于覆盖；</span></span><br><span class="line"><span class="comment">        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）</span></span><br><span class="line"><span class="comment">        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性</span></span><br><span class="line"><span class="comment">        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"userinfo"</span> &gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 constructorBased属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreQualifiersAtRuntime"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"immutable"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"modelOnly"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 rootClass 属性 </span></span><br><span class="line"><span class="comment">        &lt;property name="rootClass" value=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 参考javaClientGenerator 的  rootInterface 属性</span></span><br><span class="line"><span class="comment">        &lt;property name="rootInterface" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog </span></span><br><span class="line"><span class="comment">        &lt;property name="runtimeCatalog" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema </span></span><br><span class="line"><span class="comment">        &lt;property name="runtimeSchema" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename </span></span><br><span class="line"><span class="comment">        &lt;property name="runtimeTableName" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 注意，该属性只针对MyBatis3Simple有用；</span></span><br><span class="line"><span class="comment">            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"selectAllOrderByClause"</span> <span class="attr">value</span>=<span class="string">"age desc,username asc"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- generatedKey用于生成生成主键的方法，</span></span><br><span class="line"><span class="comment">            如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选</span></span><br><span class="line"><span class="comment">            column:主键的列名；</span></span><br><span class="line"><span class="comment">            sqlStatement：要生成的selectKey语句，有以下可选项：</span></span><br><span class="line"><span class="comment">                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1</span></span><br><span class="line"><span class="comment">                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()</span></span><br><span class="line"><span class="comment">                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1</span></span><br><span class="line"><span class="comment">                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()</span></span><br><span class="line"><span class="comment">                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()</span></span><br><span class="line"><span class="comment">                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY</span></span><br><span class="line"><span class="comment">                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性</span></span><br><span class="line"><span class="comment">        &lt;generatedKey column="" sqlStatement=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，</span></span><br><span class="line"><span class="comment">            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；</span></span><br><span class="line"><span class="comment">            那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是</span></span><br><span class="line"><span class="comment">            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；</span></span><br><span class="line"><span class="comment">            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，</span></span><br><span class="line"><span class="comment">            如果使用了columnOverride元素，该属性无效；</span></span><br><span class="line"><span class="comment">        &lt;columnRenamingRule searchString="" replaceString=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">         <span class="comment">&lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；</span></span><br><span class="line"><span class="comment">             column:要重新设置的列名；</span></span><br><span class="line"><span class="comment">             注意，一个table元素中可以有多个columnOverride元素哈~</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 使用property属性来指定列要生成的属性名称 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"property"</span> <span class="attr">value</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">             <span class="comment">&lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名</span></span><br><span class="line"><span class="comment">             &lt;property name="javaType" value=""/&gt;</span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line"> </span><br><span class="line">             <span class="comment">&lt;!-- jdbcType用于指定该列的JDBC类型 </span></span><br><span class="line"><span class="comment">             &lt;property name="jdbcType" value=""/&gt;</span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line"> </span><br><span class="line">             <span class="comment">&lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名</span></span><br><span class="line"><span class="comment">                 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler</span></span><br><span class="line"><span class="comment">                 只会生成类似：where id = #&#123;id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler&#125;的参数描述</span></span><br><span class="line"><span class="comment">             &lt;property name="jdbcType" value=""/&gt;</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line"> </span><br><span class="line">             <span class="comment">&lt;!-- 参考table元素的delimitAllColumns配置，默认为false</span></span><br><span class="line"><span class="comment">             &lt;property name="delimitedColumnName" value=""/&gt;</span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">columnOverride</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">         <span class="comment">&lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 </span></span><br><span class="line"><span class="comment">             column:指定要忽略的列的名字；</span></span><br><span class="line"><span class="comment">             delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false</span></span><br><span class="line"><span class="comment">             注意，一个table元素中可以有多个ignoreColumn元素</span></span><br><span class="line"><span class="comment">         &lt;ignoreColumn column="deptId" delimitedColumnName=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mybatis&quot;&gt;&lt;a href=&quot;#mybatis&quot; class=&quot;headerlink&quot; title=&quot;mybatis&quot;&gt;&lt;/a&gt;mybatis&lt;/h3&gt;&lt;h4 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Spring boot" scheme="http://yoursite.com/categories/Spring-boot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
      <category term="mybatis" scheme="http://yoursite.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://yoursite.com/2019/03/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2019/03/13/数据结构/</id>
    <published>2019-03-13T14:23:53.000Z</published>
    <updated>2019-04-03T08:48:12.085Z</updated>
    
    <content type="html"><![CDATA[<h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>与数组相似，链表也是一种线性数据结构。</p><h5 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h5><p>单链表中每个节点包含值和链接到下一个结点的<strong>引用字段</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表中结点的典型定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglyListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    SinglyListNode next;</span><br><span class="line">    SinglyListNode(<span class="keyword">int</span> x)&#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在大多数情况下，使用头结点来表示整个链表。</p><h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><p>与数组不同，我们无法在常量时间内访问单链表的随机元素。如果我们想要获得第i个元素，我们必须从头结点逐个遍历。时间复杂度O(N)</p><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p><strong>红黑树的特点</strong></p><ol><li>每个节点是黑色或者红色。</li><li>根节点是黑色。</li><li>每个叶子节点是黑色（这里叶子节点是指为空（NIL或者NULL）的叶子节点）</li><li>如果一个节点是红色，则它的子节点必须是黑色的。</li><li>从一个节点到该节点的子孙节点的所有路径上包含相同数目的红黑节点（这里指到叶子节点的路径）</li></ol><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><h5 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h5><p><strong>树</strong>是一种经常用到的数据结构，用来模拟具有树状结构性质的数据结合。</p><p>树里的每一个节点由一个根植和一个包含所有子节点的列表。从图的观点来看，树也可视为一个拥有N个节点和N-1条边的一个<strong>有向无环树。</strong></p><h6 id="设计链表"><a href="#设计链表" class="headerlink" title="设计链表"></a>设计链表</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表头结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表尾结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev,E element,Node&lt;E&gt; next)&#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p><strong>二叉搜索树（BST）</strong>是二叉树的一种特殊表示形式，它满足如下特性</p><ol><li>每个节点的值必须大于或等于存储在其左侧子树中的任何值。</li><li>每个节点的值必须小于或等于存储在其右侧子树中的任何值。</li></ol><h5 id="验证二叉搜索树"><a href="#验证二叉搜索树" class="headerlink" title="验证二叉搜索树"></a>验证二叉搜索树</h5><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p><p>假设一个二叉搜索树具有如下特征</p><ul><li>节点的左子树只包含<strong>小于</strong>当前节点的数。</li><li>节点的右子树只包含<strong>大于</strong>当前节点的数。</li><li>所有左子树和右子树自身必须也是二叉搜索树</li></ul><h5 id="二叉搜索树迭代器"><a href="#二叉搜索树迭代器" class="headerlink" title="二叉搜索树迭代器"></a>二叉搜索树迭代器</h5><p>实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器</p><p>调用next()将返回二叉搜索树中的下一个最小的数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h4&gt;&lt;h5 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h5&gt;&lt;p&gt;与数组
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="http://yoursite.com/2019/03/13/%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/13/算法/</id>
    <published>2019-03-13T14:06:20.000Z</published>
    <updated>2019-03-13T14:36:14.376Z</updated>
    
    <content type="html"><![CDATA[<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ol><li><p>冒泡排序</p><p><strong>原理</strong></p><p>比较两个相邻元素，将值大的元素交换至右端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;  <span class="comment">// 外层控制循环次数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;arr.lenth-<span class="number">1</span>-i;j++)&#123;  <span class="comment">//内层循环控制每一趟排序多少次</span></span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>快速排序</p><p><strong>原理</strong></p><p>选择一个关键值作为基准值。比基准值小的都在左边序列（一般是无序的），比基准值大的都在右边（一般是无序的）。一般选择序列的第一个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j,temp,t;</span><br><span class="line">        <span class="keyword">if</span>(low&gt;high)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i=low;</span><br><span class="line">        j=high;</span><br><span class="line">        <span class="comment">//temp就是基准位</span></span><br><span class="line">        temp = arr[low];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (i&lt;j) &#123;</span><br><span class="line">            <span class="comment">//先看右边，依次往左递减</span></span><br><span class="line">            <span class="keyword">while</span> (temp&lt;=arr[j]&amp;&amp;i&lt;j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//再看左边，依次往右递增</span></span><br><span class="line">            <span class="keyword">while</span> (temp&gt;=arr[i]&amp;&amp;i&lt;j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果满足条件则交换</span></span><br><span class="line">            <span class="keyword">if</span> (i&lt;j) &#123;</span><br><span class="line">                t = arr[j];</span><br><span class="line">                arr[j] = arr[i];</span><br><span class="line">                arr[i] = t;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后将基准为与i和j相等位置的数字交换</span></span><br><span class="line">         arr[low] = arr[i];</span><br><span class="line">         arr[i] = temp;</span><br><span class="line">        <span class="comment">//递归调用左半数组</span></span><br><span class="line">        quickSort(arr, low, j-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//递归调用右半数组</span></span><br><span class="line">        quickSort(arr, j+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">62</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">19</span>&#125;;</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="其他算法"><a href="#其他算法" class="headerlink" title="其他算法"></a>其他算法</h4><ol><li><p>斐波那契</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>,b = <span class="number">1</span>,c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = i; i &lt;= n -<span class="number">2</span>;i++)&#123;</span><br><span class="line">        c = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">       System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;冒泡排序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比较两个相邻元素，将值大的元素交换至右端。&lt;
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>常用SQL</title>
    <link href="http://yoursite.com/2019/03/13/%E5%B8%B8%E7%94%A8SQL/"/>
    <id>http://yoursite.com/2019/03/13/常用SQL/</id>
    <published>2019-03-13T06:50:13.000Z</published>
    <updated>2019-03-13T07:32:02.636Z</updated>
    
    <content type="html"><![CDATA[<h5 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h5><ol><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> db-<span class="keyword">name</span></span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> dbname</span><br></pre></td></tr></table></figure></li><li><p>备份sql server</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建 备份数据的device</span></span><br><span class="line"><span class="keyword">USE</span> <span class="keyword">master</span></span><br><span class="line">EXEC sp_addumpdevice <span class="string">'disk'</span>,<span class="string">'testBack'</span>,<span class="string">'path'</span></span><br><span class="line"><span class="comment">--开始备份</span></span><br><span class="line"><span class="keyword">BACKUP</span> <span class="keyword">DATABASE</span> pubs <span class="keyword">TO</span> testBack</span><br></pre></td></tr></table></figure></li><li><p>创建新表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tabname(col1 yupe1 [<span class="keyword">not</span> <span class="literal">null</span>][primary <span class="keyword">key</span>],col2 type2[<span class="keyword">not</span> <span class="literal">null</span>],...)</span><br><span class="line"><span class="comment">--根据已有的表创建新表：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_new <span class="keyword">like</span> tab_old    <span class="comment">--使用旧表创建新表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_new <span class="keyword">as</span> <span class="keyword">select</span> col1,col2...from tab_odl definition <span class="keyword">only</span></span><br></pre></td></tr></table></figure></li><li><p>列操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Alter</span> <span class="keyword">table</span> tabname <span class="keyword">add</span> <span class="keyword">column</span> <span class="keyword">col</span> <span class="keyword">type</span></span><br><span class="line"><span class="comment">-- 列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--添加主键</span></span><br><span class="line"><span class="keyword">Alter</span> <span class="keyword">table</span> tabname <span class="keyword">add</span> primary <span class="keyword">key</span>(<span class="keyword">col</span>)</span><br><span class="line"><span class="comment">--删除主键</span></span><br><span class="line"><span class="keyword">Alter</span> <span class="keyword">table</span> tabname <span class="keyword">drop</span> primary <span class="keyword">key</span>(<span class="keyword">col</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建索引</span></span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">unique</span>] <span class="keyword">index</span> idxname <span class="keyword">on</span> tabname(col...)</span><br><span class="line"><span class="comment">--删除索引</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idxname</span><br><span class="line"><span class="comment">--注：索引是不可更改的，想更改必须删除重新建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--创建视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> viewname <span class="keyword">as</span> <span class="keyword">select</span> <span class="keyword">statement</span></span><br><span class="line"><span class="comment">--删除视图</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> viewname</span><br></pre></td></tr></table></figure></li><li><p>几个简单的基本sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--选择</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> 范围；</span><br><span class="line"><span class="comment">--插入</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span>(field1,field2) <span class="keyword">values</span> (value1,value2)</span><br><span class="line"><span class="comment">--删除</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> 范围</span><br><span class="line"><span class="comment">--更新</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">table</span> <span class="keyword">set</span> field1 = value1 <span class="keyword">where</span> 范围</span><br><span class="line"><span class="comment">--查找</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> field1 <span class="keyword">like</span> <span class="string">'%value1%'</span></span><br><span class="line"><span class="comment">--排序</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">order</span> <span class="keyword">by</span> field1,field2 [<span class="keyword">desc</span>]</span><br><span class="line"><span class="comment">--总数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span> <span class="keyword">as</span> totalcount <span class="keyword">from</span> table1</span><br><span class="line"><span class="comment">--求和</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(field1) <span class="keyword">as</span> sumvaluue <span class="keyword">from</span> table1</span><br><span class="line"><span class="comment">--平均</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(<span class="keyword">field</span>) <span class="keyword">as</span> avgvalue <span class="keyword">from</span> table1</span><br><span class="line"><span class="comment">--最大</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">field</span>) <span class="keyword">as</span> maxvalue <span class="keyword">from</span> table1</span><br><span class="line"><span class="comment">--最小</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">field</span>) <span class="keyword">as</span> <span class="keyword">minvalue</span> <span class="keyword">from</span> table1</span><br></pre></td></tr></table></figure></li><li><p>几个高级查询运算词</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">UNION运算符：</span></span><br><span class="line"><span class="comment">通过组合其他两个结果表（列如TABLE1和TABLE2）并小区表中任何重复行而派生出一个结果表，当ALL随UNION一起使用时（即UNION ALL），不消除重复行，两种情况下，派生表的每一行不是来自TABLE1就是来自TABLE2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">EXCEPT运算符：</span></span><br><span class="line"><span class="comment">EXCEPT运算符通过只包括在TABLE1和而不在TABLE2中的行并消除所有重复行而派生出一个结果表。</span></span><br><span class="line"><span class="comment">当ALL随EXCEPT一起使用时，不消除重复行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">INTERSECT</span></span><br><span class="line"><span class="comment">INTERSECT 运算符通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。当 ALL 随 INTERSECT 一起使用时 (INTERSECT ALL)，不消除重复行。 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>使用外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">left (outer) join:</span><br><span class="line"><span class="comment">--左外链接：结果集既包括表的匹配行，也包括左连接表的所有行。</span></span><br><span class="line">right (outer) join:</span><br><span class="line"><span class="comment">--右外链接：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。</span></span><br><span class="line">full/cross (outer) join:</span><br><span class="line"><span class="comment">--全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录</span></span><br></pre></td></tr></table></figure></li><li><p>分组：group by:</p><p>一张表，一旦分组完成后，查询后只能得到租相关的信息。</p><p>组相关的信息：（统计信息）count,sum,max,min,avg</p><p>在SQL Sever中分组时：不能以text,ntext,image类型的字段作为分组一句</p><p>在select统计函数中的字段,不能和普通的字段放在一起；</p></li><li><p>对数据库进行操作：</p><p>分离数据库：sp_detach_db;附加数据库: sp_attach_db后接表名，附加需要完整的路径名</p><p>修改数据库名称：sp_renamedb ‘o_name’,”n_name”;</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建数据库&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="sql" scheme="http://yoursite.com/categories/sql/"/>
    
    
      <category term="sql" scheme="http://yoursite.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>PLSQL</title>
    <link href="http://yoursite.com/2019/03/13/PLSQL/"/>
    <id>http://yoursite.com/2019/03/13/PLSQL/</id>
    <published>2019-03-13T03:08:23.000Z</published>
    <updated>2019-04-24T08:24:08.221Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>PL/SQL是一种高级数据库程序设计语言，该语言专门用于在各种环境小多ORACLE数据库进行方法。由于该语言集成于数据库服务器种，所以PL/SQL代码可以对数据进行快速高效的处理。除此之外，可以在ORACLEW数据库的某些客户端工具中，使用PL/SQL语言也是该语言的一个特点。只能使用DML，不能使用DML。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p><strong>PL/SQL程序由三个块组成，即声明部分、执行部分、异常处理部分</strong></p><p>DECLARE </p><p>声明部分：再次声明PL/SQL用到的变量，类型及游标， 以及局部的存储过程和函数</p><p>BEGIN</p><p>执行部分：过程及SQL语句，程序的主要部分</p><p>EXCEPTION</p><p>执行异常部分：错误处理</p><p>END；</p><p><strong>声明变量</strong></p><p><strong>其中，执行部分是必须的</strong></p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h5><ol><li>参数：p_</li><li>程序：v_</li><li>游标：cur_</li><li>异常：e_</li><li>记录类型：t_</li></ol><h5 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h5><ol><li><p>%ROWTYPE：如果一个表有较多的列，使用%ROWTYPE来定义一个表示表中一行记录的变量，比分别使用%TYPE来定义表示表中各个列的变量要简洁得多，并且不容易遗漏、出错。这样会增加程序的可维护性。为了使一个变量的数据类型与一个表中记录的各个列的数据类型相对应、一致，Oracle提供%ROWTYPE定义方式。当表的某些列的数据类型改变了之后，这个新定义的变量的数据类型会自动跟随其改变，容易保持一致，也不用修改PL/SQL程序了。当不能确切地知道被参照的那个表的结构及其数据类型时，就只能采用这种方法定义变量的数据类型。</p><p>   一行记录可以保存从一个表或游标中查询到的整个数据行的各列数据。一行记录的各个列与表中一行的各个列有相同的名称和数据类型。</p></li><li><p>%TYPE：为了使一个变量的数据类型与另一个已经定义了的变量（尤其是表的某一列）的数据类型相一致，Oracle提供了%TYPE定义方式。当被参照的那个变量的数据类型改变了之后，这个新定义的变量的数据类型会自动跟随其改变，容易保持一致，也不用修改PL/SQL程序了。当不能确切地知道被参照的那个变量的数据类型时，就只能采用这种方法定义变量的数据类型。</p></li></ol><h5 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--使用:=赋值</span><br><span class="line">a:=555;</span><br><span class="line"> </span><br><span class="line">--使用select into 赋值</span><br><span class="line">select count(*) into a from dept;</span><br></pre></td></tr></table></figure><hr><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><h5 id="常量声明"><a href="#常量声明" class="headerlink" title="常量声明"></a>常量声明</h5><p>n_x CONSTANT NUMBER :=0;</p><p>n_b constant number default 555;</p><hr><h4 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h4><p>把逻辑相关的数据作为一个单元存储起来，乘坐PL/SQL RECORD的域（FIELD），其作用是存放<strong>互不相同但逻辑相关的信息</strong>。变量、类型、右边、局部存储过程和函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line"></span><br><span class="line">​--声明1一个记录类型</span><br><span class="line"></span><br><span class="line">​type emp_record is record(</span><br><span class="line"></span><br><span class="line">​v_sal employees.salary%type,  // 变量</span><br><span class="line"></span><br><span class="line">​v_email employees.email%type,</span><br><span class="line"></span><br><span class="line">​v_hire_date date</span><br><span class="line"></span><br><span class="line">​);</span><br><span class="line"></span><br><span class="line">​--定义一个记录类型的成员变量</span><br><span class="line"></span><br><span class="line">​v_emp_record emp_record;</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">​--sql语句的操作：select ... into ... from ... where</span><br><span class="line"></span><br><span class="line">​select salary,email,hire_date into v_sal,v_email,v_hire_date from employees where employee_id = 100;</span><br><span class="line">--使用记录类型后上边查询语句的修改</span><br><span class="line">​select salary,email,hire_date into v_emp_record from employees where employee_id = 100;</span><br><span class="line">​--打印</span><br><span class="line"></span><br><span class="line">​dbms_output.put_line(v_sal||&apos;,&apos;||v_email&apos;,&apos;||v_hire_date);</span><br><span class="line">--使用记录类型后上边查询语句的修改</span><br><span class="line">dbms_output.put_line(v_emp_record.v_sal||&apos;,&apos;||v_emp_record.email&apos;,&apos;||v_emp_record.hire_date)</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><hr><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="IF表达式"><a href="#IF表达式" class="headerlink" title="IF表达式"></a>IF表达式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IF&lt;布尔表达式&gt;THEN</span><br><span class="line">PL/SQL 和SQL语句；</span><br><span class="line">ELSIF&lt;其他布尔表达式&gt;THEN</span><br><span class="line">其他语句;</span><br><span class="line">ELSE</span><br><span class="line">其他语句；</span><br><span class="line">END IF；</span><br><span class="line">-- ELSIF 不能写成 ELSEIF</span><br></pre></td></tr></table></figure><h5 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Declare</span><br><span class="line">v_empno employee.employee_id%TYPE :=&amp;empno;</span><br><span class="line">v_salary employee.salary%TYPE;</span><br><span class="line">v_comment VARCHAR2(35);</span><br><span class="line">Begin</span><br><span class="line">select salary INTO v_salary from employees</span><br><span class="line">where employee_id=v_empno;</span><br><span class="line">if v_salary &lt;1500 then</span><br><span class="line">v_comment:=&apos;太少了，加点吧~！&apos;</span><br><span class="line">elsif v_salary&lt;3000 then</span><br><span class="line">v_comment:=&apos;多了点，少点吧~！&apos;</span><br><span class="line">else</span><br><span class="line">v_comment:=&apos;没有薪水~！&apos;</span><br><span class="line">end if;</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(v_comment);</span><br><span class="line">exception</span><br><span class="line">when no_data_found then</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(&apos;没有数据~！&apos;)；</span><br><span class="line">when others then</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(saqlcode||&apos;——&apos;||sqlerrm);</span><br><span class="line">END;</span><br><span class="line">注：Oracle内置函数sqlcode和sqlerrm主要用在others处理器中，分别用来返回oracle的错误代码和错误消息。</span><br></pre></td></tr></table></figure><h4 id="CASE表达式"><a href="#CASE表达式" class="headerlink" title="CASE表达式"></a>CASE表达式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">--格式一</span><br><span class="line">CASE 条件表达式</span><br><span class="line">  WHEN 条件表达式结果1 THEN </span><br><span class="line">     语句段1</span><br><span class="line">  WHEN 条件表达式结果2 THEN</span><br><span class="line">     语句段2</span><br><span class="line">  ……</span><br><span class="line">  WHEN 条件表达式结果n THEN</span><br><span class="line">     语句段n</span><br><span class="line">  [ELSE 条件表达式结果]</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">--格式二</span><br><span class="line">CASE </span><br><span class="line">  WHEN 条件表达式1 THEN</span><br><span class="line">     语句段1</span><br><span class="line">  WHEN 条件表达式2 THEN</span><br><span class="line">     语句段2</span><br><span class="line">  ……</span><br><span class="line">  WHEN 条件表达式n THEN </span><br><span class="line">     语句段n</span><br><span class="line">  [ELSE 语句段]</span><br><span class="line"></span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><h5 id="LOOP"><a href="#LOOP" class="headerlink" title="LOOP"></a>LOOP</h5><p>执行语句；</p><p>EXIT WHEN &lt;条件语句&gt;</p><p>END LOOP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">Declare</span><br><span class="line">    int NUMBER(2):=0;</span><br><span class="line">BEGIN</span><br><span class="line">    LOOP</span><br><span class="line">int :=int+1</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(&apos;int的当前值：&apos;||int);</span><br><span class="line">EXIT WHEN int=10; -- 退出条件  条件满足退出循环语句</span><br><span class="line">    END LOOP;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h5 id="WHILE循环"><a href="#WHILE循环" class="headerlink" title="WHILE循环"></a>WHILE循环</h5><p>WHILE&lt;布尔表达式&gt;LOOP</p><p>​    要执行的语句；</p><p>END LOOP；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">Declare</span><br><span class="line">    x NUMBER(1):=1;</span><br><span class="line">BEGIN</span><br><span class="line">    WHILE x&lt;10 LOOP</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(&apos;X的当前值为：&apos;||x);</span><br><span class="line">x:=x+1;</span><br><span class="line">    END LOOP;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h5 id="数字式循环，For循环"><a href="#数字式循环，For循环" class="headerlink" title="数字式循环，For循环"></a>数字式循环，For循环</h5><p>[&lt;&lt;循环标签&gt;&gt;]</p><p>FOR 循环计数器 IN [REVERSE] 下限 .. 上限 LOOP</p><p>​    要执行的语句；</p><p>END LOOP [循环标签];</p><p>注：没循环一次，循环变量自动加1；使用关键字REVERSE，循环变量自动鉴1.跟在IN REVERSE 后面的数字必须是从小到大的顺序，而且必须是整数，不能是变量或表达式。可以使用EXIT退出循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例1：</span><br><span class="line">BEGIN</span><br><span class="line">    FOR int in 1..10 LOOP     -- int变量为循环计数器</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(&apos;int的当前值为：&apos;||int);</span><br><span class="line">    END LOOP;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">例2:</span><br><span class="line">DECLARE</span><br><span class="line">   TYPE jobids_varray IS VARRAY(12) OF VARCHAR2(10); —定义一个VARRAY数据类型</span><br><span class="line">   v_jobids JOBIDS_VARRAY; —声明一个具有JOBIDS_VARRAY数据类型的变量</span><br><span class="line">   v_howmany NUMBER; —声明一个变量来保存雇员的数量</span><br><span class="line">BEGIN</span><br><span class="line">   —用某些job_id值初始化数组</span><br><span class="line">   v_jobids := jobids_varray(‘FI_ACCOUNT‘, ‘FI_MGR‘, ‘ST_CLERK‘, ‘ST_MAN‘);</span><br><span class="line">   —用FOR…LOOP…END LOOP循环使用每个数组成员的值</span><br><span class="line">   FOR i IN v_jobids.FIRST..v_jobids.LAST LOOP</span><br><span class="line">   —针对数组中的每个岗位，决定该岗位的雇员的数量</span><br><span class="line">      SELECT count(*) INTO v_howmany FROM employees WHERE job_id = v_jobids(i);</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE ( ‘岗位‘||v_jobids(i)||</span><br><span class="line">                       ‘总共有‘|| TO_CHAR(v_howmany) || ‘个雇员‘);</span><br><span class="line">   END LOOP;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">例4: 在While循环中嵌套loop循环</span><br><span class="line"> </span><br><span class="line">/*求100至110之间的素数*/</span><br><span class="line">DECLARE</span><br><span class="line">   v_m NUMBER := 101;</span><br><span class="line">   v_i NUMBER;</span><br><span class="line">   v_n NUMBER := 0;</span><br><span class="line">BEGIN</span><br><span class="line">   WHILE v_m &lt; 110 LOOP</span><br><span class="line">      v_i := 2;</span><br><span class="line">      LOOP</span><br><span class="line">         IF mod(v_m, v_i) = 0 THEN</span><br><span class="line">            v_i := 0;</span><br><span class="line">            EXIT;</span><br><span class="line">         END IF;</span><br><span class="line">    </span><br><span class="line">         v_i := v_i + 1;</span><br><span class="line">         EXIT WHEN v_i &gt; v_m – 1; </span><br><span class="line">      END LOOP;</span><br><span class="line">      </span><br><span class="line">      IF v_i &gt; 0 THEN</span><br><span class="line">         v_n := v_n + 1;</span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(‘第‘|| v_n || ‘个素数是‘ || v_m);</span><br><span class="line">      END IF;</span><br><span class="line">      v_m := v_m + 2;</span><br><span class="line">   END LOOP;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h5 id="标号和GOTO"><a href="#标号和GOTO" class="headerlink" title="标号和GOTO"></a>标号和GOTO</h5><p>PL/SQL中GOTO语句是无条件跳转到指定的标号去的意思。语法如下：</p><p>GOTO label</p><p>…..</p><p>&lt;<label>&gt;　/<em>标号是用&lt;&lt;　&gt;&gt;括起来的标识符 </em>/</label></p><p> <strong>注意</strong>，在以下地方使用是不合法的，编译时会出错误。</p><p> 跳转到非执行语句前面。</p><p> 跳转到子块中。</p><p> 跳转到循环语句中。</p><p> 跳转到条件语句中。</p><p> 从异常处理部分跳转到执行。</p><p> 从条件语句的一部分跳转到另一部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">   V_counter NUMBER := 1;</span><br><span class="line">BEGIN</span><br><span class="line">   LOOP </span><br><span class="line">     DBMS_OUTPUT.PUT_LINE(‘V_counter的当前值为:‘||V_counter);</span><br><span class="line">     V_counter := v_counter + 1;</span><br><span class="line">   IF v_counter &gt; 10 THEN</span><br><span class="line">       GOTO labelOffLOOP;</span><br><span class="line">   END IF;</span><br><span class="line">   END LOOP;</span><br><span class="line">   &lt;&lt;labelOffLOOP&gt;&gt;</span><br><span class="line">     DBMS_OUTPUT.PUT_LINE(‘V_counter的当前值为:‘||V_counter);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">   v_i NUMBER := 0;</span><br><span class="line">   v_s NUMBER := 0;</span><br><span class="line">BEGIN</span><br><span class="line">   &lt;&lt;label_1&gt;&gt;</span><br><span class="line">   v_i := v_i + 1;</span><br><span class="line">   IF v_i &lt;= 1000 THEN</span><br><span class="line">      v_s := v_s + v_i;</span><br><span class="line">      GOTO label_1;</span><br><span class="line">   END IF;</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(v_s);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h5 id="NULL语句"><a href="#NULL语句" class="headerlink" title="NULL语句"></a>NULL语句</h5><p>在PL/SQL 程序中，NULL语句是一个可执行语句，可以用 null 语句来说明“不用做任何事情”的意思，相当于一个占位符或不执行任何操作的空语句，可以使某些语句变得有意义，提高程序的可读性，保证其他语句结构的完整性和正确性。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">例1：</span><br><span class="line">DECLARE</span><br><span class="line">    …</span><br><span class="line">BEGIN</span><br><span class="line">    …</span><br><span class="line">    IF v_num IS NULL THEN</span><br><span class="line">    GOTO labelPrint;</span><br><span class="line">    END IF;</span><br><span class="line">  …</span><br><span class="line">  &lt;&lt;labelPrint&gt;&gt;  --这是一个标号</span><br><span class="line">  NULL; —不需要处理任何数据。</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">例2:</span><br><span class="line">DECLARE</span><br><span class="line">   v_emp_id employees.employee_id%TYPE;</span><br><span class="line">   v_first_name employees.first_name%TYPE;</span><br><span class="line">   v_salary employees.salary%TYPE;</span><br><span class="line">   v_sal_raise NUMBER(3,2);</span><br><span class="line">BEGIN</span><br><span class="line">   v_emp_id := &amp;emp_id;</span><br><span class="line">   SELECT first_name, salary INTO v_first_name, v_salary</span><br><span class="line">   FROM employees WHERE employee_id = v_emp_id;</span><br><span class="line">   IF v_salary &lt;= 3000 THEN</span><br><span class="line">      v_sal_raise := .10;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(v_first_name||‘的工资是‘||v_salary</span><br><span class="line">                                       ||‘、工资涨幅是‘||v_sal_raise);</span><br><span class="line">   ELSE</span><br><span class="line">      NULL;</span><br><span class="line">   END IF;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h3 id="游标的使用"><a href="#游标的使用" class="headerlink" title="游标的使用"></a>游标的使用</h3><p>在PL/SQL程序中，对于处理多行记录的事务经常使用游标来实现。</p><p>类似于Java中的iterator。是一个指向上下文的句柄或指针。</p><p>显示游标处理需要四个PL/SQL处理步骤：</p><p>定义游标：</p><p>CURSOR</p><p>打开游标</p><p>OPEN</p><p>提取游标数据：检索结果集合中的数据行，放入指定的输出变量中。</p><p>格式</p><p>FETCH cursor_name INTO {variable_list | record_variable}; </p><p>关闭游标：</p><p>CLOSE cursor_name;</p><h6 id="例1-1"><a href="#例1-1" class="headerlink" title="例1"></a>例1</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line"></span><br><span class="line">cursor cur_emp is select * from emp;</span><br><span class="line">t_emp emp%rowtype;</span><br><span class="line">begin</span><br><span class="line">  open cur_emp;  -- 打卡游标</span><br><span class="line">  fetch cur_emp into t_emp; --提取游标数据：检索结果集合中的数据行，放入指定输出变量中</span><br><span class="line">  dbms_output.put_line(t_emp.ename);</span><br><span class="line">  close cur_emp;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h6 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">cursor c is select tname from tab ; </span><br><span class="line">l_tname varchar2(64);</span><br><span class="line">begin </span><br><span class="line">open c ; </span><br><span class="line">loop</span><br><span class="line">    fetch c into l_tname ;</span><br><span class="line">    exit when c%notfound ; </span><br><span class="line">    dbms_output.put_line(l_tname);</span><br><span class="line">end loop;</span><br><span class="line">close c;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">--打印出80部门所有员工工资</span><br><span class="line">declare </span><br><span class="line">--声明一个记录类型</span><br><span class="line">type emp_record is record(</span><br><span class="line">        v_sal employees.salary%type,</span><br><span class="line">        v_empid v_employees.employee_id%type</span><br><span class="line">        );</span><br><span class="line">    --声明一个记录类型的变量</span><br><span class="line">    v_emp_record emp_record</span><br><span class="line">--定义一个游标</span><br><span class="line">cursor emp_sal_cursor is select salary,employee_id  from employees where department_id = 80;</span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">--打开游标</span><br><span class="line">open emp_sal_cursor</span><br><span class="line">--提取游标</span><br><span class="line">fetch emp_sal_cursor into v_emp_record;</span><br><span class="line"></span><br><span class="line">while emp_sal_cursor%found loop</span><br><span class="line">dbms_output_putline(&apos;salary:&apos;||v_emp_record.v_sal&apos;,&apos;||v_emp_record.v_emp);</span><br><span class="line">fetch emp_sal_cursor into v_sal,v_empid;</span><br><span class="line">end loop;</span><br><span class="line">--关闭游标</span><br><span class="line">close emp_sal_cursor;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="系统异常"><a href="#系统异常" class="headerlink" title="系统异常"></a>系统异常</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 处理系统定义异常</span><br><span class="line">declare</span><br><span class="line">n varchar2(20);</span><br><span class="line">begin</span><br><span class="line">  --返回多行</span><br><span class="line">  select ename into n from emp;</span><br><span class="line">  --未找到记录</span><br><span class="line">  --select ename into n from emp;</span><br><span class="line">  --被零除</span><br><span class="line">  --n:=3/0;</span><br><span class="line">  exception</span><br><span class="line">    when too_many_rows then</span><br><span class="line">      dbms_output.put_line(&apos;返回多行&apos;);</span><br><span class="line">    when no_data_found then</span><br><span class="line">      dbms_output.put_line(&apos;未找到数据&apos;);</span><br><span class="line">    when zero_divide then</span><br><span class="line">      dbms_output.put_line(&apos;试图被零除&apos;);</span><br><span class="line">    when others then</span><br><span class="line">      dbms_output.put_line(&apos;其他错误&apos;);</span><br></pre></td></tr></table></figure><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">      v_empno emp.empno%type := &amp;empno;</span><br><span class="line">      no_result exception;  --声明一个异常</span><br><span class="line">begin</span><br><span class="line">  update emp set sal = sal + 100 where empne = v_empno;</span><br><span class="line">  if sql%notfound then --如果sql未成功</span><br><span class="line">    raise no_result; -- 抛出自定义异常</span><br><span class="line">  end if;</span><br><span class="line">  commit;</span><br><span class="line">exception</span><br><span class="line">  when no_result then</span><br><span class="line">    dbms_output.put_line(&apos;数据更新失败&apos;);</span><br><span class="line">  when others then</span><br><span class="line">    dbms_output.put_line(sqlcode||&apos;---&apos;||&apos;错误信息&apos;||sqlerrm);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;PL/SQL是一种高级数据库程序设计语言，该语言专门用于在各种环境小多ORACLE数据库进行方法。由于该语言集成于数据库服务器种，所以PL/
      
    
    </summary>
    
      <category term="PLSQL" scheme="http://yoursite.com/categories/PLSQL/"/>
    
    
      <category term="PLSQL" scheme="http://yoursite.com/tags/PLSQL/"/>
    
  </entry>
  
  <entry>
    <title>linux面试题</title>
    <link href="http://yoursite.com/2019/03/12/linux%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2019/03/12/linux面试题/</id>
    <published>2019-03-12T11:08:35.000Z</published>
    <updated>2019-03-12T11:46:17.881Z</updated>
    
    <content type="html"><![CDATA[<h5 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h5><ol><li><p>zip的解压方式</p><p>zip -r /test/etc /test</p><p>unzip /test/etc</p></li><li><p>Linux内核引导时，从文件 <strong>/etc/fstab</strong> 中读取要加载的文件系统</p></li><li><p>Linux文件系统中每个文件用<strong>索引节点</strong>来标识。</p></li><li><p>vi编辑模式下，用<strong>ESC</strong>来进行模式转化</p></li><li><p>检查已安装的文件系统/dev/had5 是否正常，若检查有错则自动修复，其命令及参数是？</p><p>fsck -a /dev/had5</p></li><li><p>在Linux系统下，第二个IDE通道的硬盘(从盘)被标识为</p><p>hdb</p></li><li><p>为脚本程序 test.sh 指定执行权限的命令以及参数是</p><p>chmod a+x test.sh 或者 chmod 755 test.sh</p></li><li><p>如何让一个check.sh脚本从每天凌晨2点30分执行</p><p>30 02 /bin/bash /home/fang/check.sh</p></li><li><p>用一条命令实现删除当前目录下3天前被修改的文件</p><p>find ./ -type f -mtime +3 -exex rm -f {} \;</p></li><li><p>怎样查看当前系统版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/CentOs-release</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;zip的解压方式&lt;/p&gt;
&lt;p&gt;zip -r /test/etc /test&lt;/p&gt;
&lt;p&gt;unzip /test/etc
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库相关</title>
    <link href="http://yoursite.com/2019/03/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2019/03/12/数据库相关/</id>
    <published>2019-03-12T10:58:11.000Z</published>
    <updated>2019-03-20T10:47:24.359Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>触发器的作用</p><p>触发器是一种特殊存储过程，主要通过事件来触发而被执行的。它可以强化约束，来维护数据的完整性和一致性，可以跟踪数据库内的操作而不允许未经许可的更新和变化。可以联机运算。如，某表上的触发器包含对另一个表的数据操作，而该操作又会出发新的触发器。</p></li><li><p>什么是存储过程？用什么来调用</p><p>存储过程是一个预编译的Sql语句</p></li></ol><h5 id="Oracle常用名词、概念"><a href="#Oracle常用名词、概念" class="headerlink" title="Oracle常用名词、概念"></a>Oracle常用名词、概念</h5><ol><li><p>数据库块（BLOCK）</p><p>Oracle数据库中的最小存储和处理单位，包含块本身的头信息数据或PL/SQL代码，</p><p>Oracle块的大小可以在安装时选择自定义安装来指定，也可以在CREATEDATABASE创建数据库实例时指定。最小为2K最大64K</p></li><li><p>瓶颈（Bottleneck）</p><p>指限制系统性能的部件</p></li><li><p>面向对象的关系数据库</p><p>具有关系数据库的全部功能同时又支持面向对象的数据库称作面向对象关系数据库系统 ，Oracle7是一种功能完备的关系数据库系统</p></li><li><p>DML：数据库操纵语言：它们是Select、update、insert、delete，就像它的名字一样，对数据库里面的数据进行操作</p></li><li><p>DDL：数据定义语言：DDL比DML要多，主要命令有CREATE、ALTER、DROP等，DDL主要用在定义或改变表（TABLE）的结构，数据类型，表之间的链接和约束等初始化工作上，它们大多在建表时使用。</p></li><li><p>DCL：数据库控制语言：是用来设置或更改数据库用户或角色权限的语句</p><p><strong>SQL语言16种基本命令</strong></p><p>DDL命令：CREATE，ALTER，DROP，RENAME，TRUNCATE，COMMENT</p><p>DML命令：SELECT，INSERT，UPDATE，DELETE，MERGE</p><p>DCL命令：SAVEPOINT，ROLLBACK，COMMIT，GRANT，REVOKE</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;触发器的作用&lt;/p&gt;
&lt;p&gt;触发器是一种特殊存储过程，主要通过事件来触发而被执行的。它可以强化约束，来维护数据的完整性和一致性，可以跟踪数据库内的操作而不允许未经许可的更新和变化。可以联机运算。如，某表上的触发器包含对另一个表的数据操作，而该操作又会出发新
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>负载均衡</title>
    <link href="http://yoursite.com/2019/03/11/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://yoursite.com/2019/03/11/反向代理负载均衡/</id>
    <published>2019-03-11T02:58:58.000Z</published>
    <updated>2019-03-11T03:08:00.829Z</updated>
    
    <content type="html"><![CDATA[<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡建立在现有网络结构之上，是由多台服务器以对称方式组成一个服务器集合，每台服务器享有等价的地位 ，都可以单独对外提供服务而无需其他服务器的辅助。它提供了一种廉价有效同名的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络诗句处理能力、提高网络的灵活性和可用性。</p><h4 id="反向代理负载均衡"><a href="#反向代理负载均衡" class="headerlink" title="反向代理负载均衡"></a>反向代理负载均衡</h4><p>普通代理方式是代理内部网络用户访问Internet上服务器的连接请求，客户端必须指定代理服务器，并将本来要直接发送到Internet上服务器的连接请求发送给代理服务器处理。反向代理（Reverse proxy）方式是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内网服务器，并将得到的结果返回给Internet上请求的客户端，此时代理服务器对外就表现为一个服务器。反向代理负载均衡技术是把将来自Internet上的连接请求以反向代理的方式动态地转发给内网上的堕胎服务器进行处理，从而达到负载均衡的目的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;负载均衡&quot;&gt;&lt;a href=&quot;#负载均衡&quot; class=&quot;headerlink&quot; title=&quot;负载均衡&quot;&gt;&lt;/a&gt;负载均衡&lt;/h3&gt;&lt;p&gt;负载均衡建立在现有网络结构之上，是由多台服务器以对称方式组成一个服务器集合，每台服务器享有等价的地位 ，都可以单独对外提供服
      
    
    </summary>
    
    
      <category term="负载均衡" scheme="http://yoursite.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud</title>
    <link href="http://yoursite.com/2019/03/05/spring-cloud/"/>
    <id>http://yoursite.com/2019/03/05/spring-cloud/</id>
    <published>2019-03-05T05:49:22.000Z</published>
    <updated>2019-03-05T08:30:43.519Z</updated>
    
    <content type="html"><![CDATA[<h5 id="spring-cloud"><a href="#spring-cloud" class="headerlink" title="spring cloud:"></a>spring cloud:</h5><p>​    Spring Cloud Netflix:</p><p>​        是对Netflix开发的一套分布式服务器框架封装，包括服务的发现和注册，负载均衡，断路器，REST客户端，请求路由等。</p><p>​    Spring Cloud Eureka:</p><p>​        是Spring Colud Netflix为服务套件中的一部分，基于Netflix Eureka做了二次封装，主要负责完成微服务架构中的服务治理功能。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>eureka服务端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-eureka-server --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加上注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">// eureka 服务端</span></span><br><span class="line"><span class="meta">@EnableFeignClien</span>  <span class="comment">//开启feign客户端</span></span><br></pre></td></tr></table></figure><p>服务提供者</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;spring-cloud&quot;&gt;&lt;a href=&quot;#spring-cloud&quot; class=&quot;headerlink&quot; title=&quot;spring cloud:&quot;&gt;&lt;/a&gt;spring cloud:&lt;/h5&gt;&lt;p&gt;​    Spring Cloud Netflix:&lt;/
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="spring cloud" scheme="http://yoursite.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>jdk11新特性</title>
    <link href="http://yoursite.com/2019/03/05/jdk11%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2019/03/05/jdk11新特性/</id>
    <published>2019-03-05T03:48:21.000Z</published>
    <updated>2019-03-12T02:36:47.045Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>JShell(java9开始支持)</p><p>交互性工具，让java也可以像脚本语言一样运行，进行快速测试</p></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">启动命令</span><br><span class="line">jshell</span><br><span class="line">退出命令</span><br><span class="line">/exit</span><br><span class="line">查看帮助</span><br><span class="line">/help</span><br></pre></td></tr></table></figure><p>   <a href="https://docs.oracle.com/javase/9/jshell/toc.htm" target="_blank" rel="noopener">详情点击官方文档</a></p><ol start="2"><li><p>Dynamic Class-File Constants类文件一种新添结构</p><p>Java 的类型文件格式将被扩展，支持一种新的常量格式：</p><p>CONSTANT_Dynamic,CONSTANT_Dynamic会将创建委托给 bootstrap方法</p><p>其谬地是降低开发新形式的可实现类文件约束带来的成本和干扰</p></li><li><p>局部变量的类型推断(var”关键字”)</p><p>什么是局部变量类型推断？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> javastack = <span class="string">"javastack"</span>;</span><br><span class="line">System.out.println(javastack)</span><br></pre></td></tr></table></figure><p>局部变量的类型推断就是左边的类型直接使用var 定义，而不用写具体的类型，编译器能根据右边的表达式自动推断类型。</p><p>在声明隐式类型的lambda表达式的形参时允许使用var</p><p>使用var的好处是在使用lambda表达式时给参数加上注解</p><p>(@Nonnull var x,@Nullable var y) -&gt; x.process(y)；</p><p><strong>注意点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a; <span class="comment">//这样不可以，无法推断</span></span><br><span class="line"><span class="comment">//类的属性的数据类型不可以使用var，</span></span><br></pre></td></tr></table></figure></li><li><p>集合中的一些增强API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">"aa"</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快捷方式</span></span><br><span class="line">List&lt;String&gt; list2 = List.of(<span class="string">"aa"</span>,<span class="string">"bb"</span>);</span><br><span class="line">list2.add(<span class="string">"cc"</span>) <span class="comment">// 不能添加元素</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">List&lt;String&gt; list3 = Arrays.asList(<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>);</span><br><span class="line">list3.add(<span class="string">"dd"</span>)； <span class="comment">// 不能添加元素</span></span><br><span class="line">Set set = Set.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">//同理，不能添加元素</span></span><br><span class="line">Set&lt;Integer&gt; set = Set.of(<span class="number">100</span>,<span class="number">50</span>,<span class="number">100</span>) <span class="comment">// 重复元素抛出异常</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;JShell(java9开始支持)&lt;/p&gt;
&lt;p&gt;交互性工具，让java也可以像脚本语言一样运行，进行快速测试&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
   &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="JDK" scheme="http://yoursite.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="http://yoursite.com/2019/03/04/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2019/03/04/面试题/</id>
    <published>2019-03-04T11:04:48.000Z</published>
    <updated>2019-03-16T07:16:09.594Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>String和String Buffer以及String Builer的区别</p><p>线程安全：String和StringBuilder线程不安全，StringBuffer线程安全</p><p>效率：StringBuilder &gt; StringBuffcer</p><p>使用原则：当数据量小且单线程使用String，数据量大单线程使用StringBuilder。多线程使用StringBuffer</p></li><li><p><strong>List、Set、Map</strong></p><p><strong>list:</strong></p><ol><li>可以允许重复对象</li><li>可以插入多个null元素</li><li>是一个有序容器，输出顺序即插入顺序</li><li>常用实现类ArrayList、LinkedList和Vector</li></ol><p><strong>set:</strong></p><ol><li>不允许重复对象</li><li>只允许一个Null元素</li><li>无序容器，TreeSet通过Comparator或者Comparable维护了一个排序顺序</li><li>常用实现类HashSet、LinkedHashSet以及TreeSet。TreeSet实现了SortedSet接口</li></ol><p><strong>Map</strong>：不是collection的子接口或者实现类，Map是一个接口</p><ol><li>Map的每个Entry都持有两个对象，键唯一</li><li>TreeMap</li><li>Map里可以有多个Null值，但只有一个null键</li></ol></li><li><p><strong>==与equals</strong></p><p>==：作用是判断两个对象的地址是否相等</p><p>equals() 当类没有覆盖equals()方法，则通过equals()比较类的两个对象时，等价于通过”==”比较这两个对象</p><p>类覆盖equals()方法，则比较内容是否相等。</p></li><li><p><strong>hashCode与equals</strong></p><p>hashCode()的作用是获取哈希码，返回int整数。在插入数据时先比较hash值，如果相同会调用equals()比较内容是否相同，如果相同则不加入，如果不同则重新散列到其他位置。就减少了equals的次数，提高执行速度。</p><p><strong>hashCode与equals的相关规定</strong></p><ol><li>如果两个对象相等，则hashCode一定相同</li><li>两个对象相等，对两个对象分别调用equals方法都返回true</li><li>两个对象有相同哈希值，它们不一定相同</li><li>因此，equals方法被覆盖过，则hashCode方法也必须被覆盖</li><li>hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ol></li><li><p>什么是多态？</p><p>多态是同一个行为具有多个不同表现形式或形态</p><p>多态就是同一个接口，使用不同的实例而执行不同的操作</p></li><li><p>编译时多态和运行时多态</p><p><strong>编译时多态</strong></p><p>主要是方法的重载，通过参数列表的不同来区分不同的方法。</p><p><strong>运行时多态</strong></p><p>也称作动态绑定，一般是指在执行期间判断段引用对象的实际类型，根据实际类型判断并调用相应的属性和方法。主要用于继承父类和实现接口时，父类引用指向子类对象。</p></li><li><p>int和integer的区别</p><ol><li>int是基本数据类型，integer是其包装类</li><li>integer必须实例化后猜能使用，int则不需要</li><li>integer是实际对象的引用，当new一个integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值</li><li>integer的默认值是null，int是0</li></ol></li><li><p>抽象类和接口有什么异同</p><ol><li>抽象类可以有默认的方法实现，接口则完全抽象，需要default关键字</li><li>都需要子类实现声明的方法</li><li>抽象类可以有构造器，接口不可以</li><li>接口方法只能用public修饰符，抽象方法可以使用private以外的修饰符</li><li>抽象类可以继承一个类和实现多个接口，接口只可以继承一个或多个其他接口</li></ol></li><li><p>什么是死锁？如何避免死锁</p><p><strong>定义</strong></p><p>线程死锁是指由两个或者多个线程互相持有对方所需要的资源，导致线程处于等待状态</p><p><strong>递归死锁</strong></p><p>本函数调用其他函数，其他函数又调用本函数</p><p><strong>避免死锁</strong></p><ol><li>加锁顺序</li><li>加锁时限</li><li>死锁检测</li></ol></li><li><p>什么是ORM</p><p><strong>对象关系映射</strong></p><p>将对象和数据库中的数据进行绑定</p></li><li><p>mybatis中#和$占位符的区别</p><ol><li>#将传入的数据当成字符串，会对自动传入的数据加双引号</li><li>$将传入的数据直接显示生成在sql中</li><li>#能防止sql注入</li><li>$方式一般用于传入数据库对象，例如传入表明</li><li>一般能用#不用$</li></ol></li><li><p>写一个Singleton实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">某个类只能有一个实例</span></span><br><span class="line"><span class="comment">构造器私有化</span></span><br><span class="line"><span class="comment">它必须自行创建这个实例</span></span><br><span class="line"><span class="comment">含有一个该类的静态变量来保存这个实例</span></span><br><span class="line"><span class="comment">它必须自行向整个系统提供这个实例</span></span><br><span class="line"><span class="comment">对外提供获取该实例对象的方式</span></span><br><span class="line"><span class="comment">枚举式</span></span><br><span class="line"><span class="comment">将该类型对象限定为一个</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类初始化过程</p><ol><li><p>一个类要创建实例需要先加载并初始化该类</p><p>main方法所在的类需要先加载和被初始化</p></li><li><p>子类需要先初始化父类</p></li><li><p>类的初始化就是执行<clinit>()方法 在字节码文件中</clinit></p><p><clinit>()方法由静态类变量显示赋值代码和静态代码块组成</clinit></p><p>类变量显示赋值代码和静态代码块代码从上到下顺序执行</p><p><clinit>()方法只执行一次</clinit></p></li></ol></li><li><p>实例初始化过程</p><ol><li>实例初始化就是执行<init>()方法<ol><li><init>()方法可能重载多个，有几个构造器就有几个<init>()方法</init></init></li><li><init>()方法由非静态实例变量显示赋值代码块和非静态代码块、对应构造器代码组成</init></li><li>非静态实例变量显示赋值代码和非静态代码块代码从上到下顺序执行，而对应构造器代码最后执行</li><li>每次创建实例对象，调用对应构造器，执行的就是对应的<init>()方法</init></li><li><init>()方法的首行是super（）或者super(实参列表)，即对应父类的<init>()方法</init></init></li></ol></init></li></ol></li><li><p>spring bean的作用域</p><p>在Spring中，可以在<bean>元素的scope属性里设置bean的作用域，以决定这个bean是单实例的还是多实例的。</bean></p><p>默认情况下，Spring只为在每个IOC容器里声明的bean创建唯一一个实例，整个IOC容器范围内都能共享该实例：所有后续的getBean()调用和bean引用都将返回这个唯一的bean实例。该作用域被成为Singleton，它是所有bean的默认作用域。</p><p><strong>prototype</strong></p><p>每次调用getBean()时都会返回一个新的实例</p><p><strong>request</strong></p><p>每次HTTP请求会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境</p><p><strong>session</strong></p><p>同一个HTTP session共享一个Bean，不同的HTTP session使用不同的Bean。该作用域仅适用于WebApplicaitionContext环境</p></li><li><p>简单介绍Spring支持的常用数据库事务传播属性和事务隔离级别</p><p><strong>事务的属性</strong></p><ol><li><p><strong>propagation：</strong>用来设置事务的传播行为</p><p>事务的传播行为：一个方法运行在了一个开启了事务的方法中时，当前方法是使用原来的事务还是开启一个新的事务。</p><p>-Propagation.REQUIRED:默认值：使用原来的事务</p><p>-Propagation.REQUIRED_NEW：将原来的事务挂起，开启一个新的事务</p></li><li><p><strong>isolation</strong>：用来设置事务的隔离级别</p><p>-Isolation.REPEATABLE_READ：可重复读，MySQL默认的隔离级别</p><p>-Isolation.READ_COMMITTED：读已提交，Oracle默认的隔离级别，开发时通常使用的隔离级别</p></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;String和String Buffer以及String Builer的区别&lt;/p&gt;
&lt;p&gt;线程安全：String和StringBuilder线程不安全，StringBuffer线程安全&lt;/p&gt;
&lt;p&gt;效率：StringBuilder &amp;gt; Strin
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>HashMap实现原理</title>
    <link href="http://yoursite.com/2019/03/04/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/03/04/HashMap实现原理/</id>
    <published>2019-03-04T10:59:44.000Z</published>
    <updated>2019-03-05T05:51:10.447Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HashMap实现原理："><a href="#HashMap实现原理：" class="headerlink" title="HashMap实现原理："></a>HashMap实现原理：</h4><h6 id="jdk1-8以前"><a href="#jdk1-8以前" class="headerlink" title="jdk1.8以前"></a>jdk1.8以前</h6><p>JDK1.8 之前 HashMap 底层是 <strong>数组和链表</strong> 结合在一起使用也就是 <strong>链表散列</strong>。<strong>HashMap 通过 key 的 hashCode 经过扰动函数处理过后得到 hash  值，然后通过 <code>(n - 1) &amp; hash</code> 判断当前元素存放的位置（这里的 n 指的时数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。</strong></p><p><strong>所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 hashCode() 方法 换句话说使用扰动函数之后可以减少碰撞。</strong></p><p>哈希表（散列表）：在哈希表中进行添加，删除，查找等操作，性能十分之高，不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)；哈希表的主干是数组；</p><h5 id="哈希冲突："><a href="#哈希冲突：" class="headerlink" title="哈希冲突："></a>哈希冲突：</h5><p>当我们对某个元素进行哈希运算，得到一个存储地址，然后要进行插入的时候，发现已经被其他元素占用了，其实这就是所谓的<strong>哈希冲突</strong>，也叫哈希碰撞。哈希函数的设计至关重要，好的哈希函数会尽可能地保证 <strong>计算简单</strong>和<strong>散列地址分布均匀,</strong>但是，我们需要清楚的是，数组是一块连续的固定长度的内存空间，再好的哈希函数也不能保证得到的存储地址绝对不发生冲突。那么哈希冲突如何解决呢？哈希冲突的解决方案有多种:开放定址法（发生冲突，继续寻找下一块未被占用的存储地址），再散列函数法，链地址法，而HashMap即是采用了链地址法，也就是<strong>数组+链表</strong>的方式</p><p>HashMap的主干是一个Entry数组，Entry是Hash Map的基本组成单元，每一个Entry包含一个key-value键值对。</p><p>Entry是HashMap中的一个静态内部类。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; next;<span class="comment">//存储指向下一个Entry的引用，单链表结构</span></span><br><span class="line">        <span class="keyword">int</span> hash;<span class="comment">//对key的hashcode值进行hash运算后得到的值，存储在Entry，避免重复计算</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates new entry.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">            value = v;</span><br><span class="line">            next = n;</span><br><span class="line">            key = k;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/1024555/201611/1024555-20161113235348670-746615111.png" alt="HashMap整体结构"></p><h5 id="其他几个重要字段"><a href="#其他几个重要字段" class="headerlink" title="其他几个重要字段"></a>其他几个重要字段</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实际存储的key-value键值对的个数</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">//阈值，当table == &#123;&#125;时，该值为初始容量（初始容量默认为16）；当table被填充了，也就是为table分配内存空间后，threshold一般为 capacity*loadFactory。HashMap在进行扩容时需要参考threshold，后面会详细谈到</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"><span class="comment">//负载因子，代表了table的填充度有多少，默认是0.75</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"><span class="comment">//用于快速失败，由于HashMap非线程安全，在对HashMap进行迭代时，如果期间其他线程的参与导致HashMap的结构发生变化了（比如put，remove等操作），需要抛出异常ConcurrentModificationException</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br></pre></td></tr></table></figure><h5 id="jdk1-8之后"><a href="#jdk1-8之后" class="headerlink" title="jdk1.8之后"></a>jdk1.8之后</h5><p>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">// key.hashCode()：返回散列值也就是hashcode</span></span><br><span class="line">    <span class="comment">// ^ ：按位异或</span></span><br><span class="line">    <span class="comment">// &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeMap、TreeSet以及JDK1.8之后的HashMap底层都用到了红黑树。红黑树是一种平衡二叉树，为了解决二叉树的缺陷，因为二叉树查找某些情况下会退化成为一个线性结构</p><h6 id="为什么不直接使用红黑树"><a href="#为什么不直接使用红黑树" class="headerlink" title="为什么不直接使用红黑树"></a>为什么不直接使用红黑树</h6><p>我们知道红黑树属于（自）平衡二叉树，但是为了保持“平衡”是需要付出代价的，红黑树在插入新数据后可能需要通过左旋，右旋、变色这些操作来保持平衡。引入红黑树就是为了查找数据快，如果链表长度很短的话，根本不需要引入红黑树的，你引入之后还要付出代价维持它的平衡。但是链表过长就不一样了。至于为什么选 8 这个值呢？通过概率统计所得，这个值是综合查询成本和新增元素成本得出的最好的一个值。</p><h6 id="HashMap构造器"><a href="#HashMap构造器" class="headerlink" title="HashMap构造器"></a>HashMap构造器</h6><p>HashMap有4个构造器，其他构造器如果用户没有传入initialCapacity 和loadFactor这两个参数，会使用默认值</p><p>initialCapacity默认为16，loadFactory默认为0.75</p><p>数据结构的物理存储结构只有两种：顺序存储和链式存储。    </p><h6 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment">     * static final float DEFAULT_LOAD_FACTOR = 0.75f; 装填因子，在数组长度的0.75的时候扩容</span></span><br><span class="line"><span class="comment">     * final float loadFactor 接收装填因子的变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="HashMap和HashTable的区别-HashSet和HashMap的区别"><a href="#HashMap和HashTable的区别-HashSet和HashMap的区别" class="headerlink" title="HashMap和HashTable的区别/HashSet和HashMap的区别"></a>HashMap和HashTable的区别/HashSet和HashMap的区别</h5><h6 id="Hash-Map和HashTable"><a href="#Hash-Map和HashTable" class="headerlink" title="Hash Map和HashTable"></a>Hash Map和HashTable</h6><ol><li>线程安全：HashMap是非线程安全的，HashTable是线程安全的；HashTable内部的方法都通过synchronized修饰（如果要保证线程安全使用ConcurrentHashMap）</li><li>效率：HashMap效率高，因为HashTable需要保证线程安全</li><li>对Null Key和Null Value 的支持：HashMap中,null可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为Null，HashTable只要有一个键为Null，就抛出空指针异常</li><li>①初始容量大小和每次扩容增量不同：HashTable默认为11，每次扩容变为 原来的2n+1，HashMap默认初始化大小为16，之后每次扩容容量变为原来的2倍。②如果创建的时候给定了初始容量值，那么HashTable会直接使用你给定的大小，而HashMap会将其扩充为2的幂次方大小（HashMap中的tableSizeFor（）方法保证），也就是说Hash Map总是使用2的幂次方作为哈希表的大小。</li><li>底层数据结构：红黑树和链表散列的区别</li></ol><h6 id="HashSet和HashMap"><a href="#HashSet和HashMap" class="headerlink" title="HashSet和HashMap"></a>HashSet和HashMap</h6><p>如果你看过 HashSet 源码的话就应该知道：HashSet 底层就是基于 HashMap 实现的。（HashSet 的源码非常非常少，因为除了 clone() 方法、writeObject()方法、readObject()方法是 HashSet 自己不得不实现之外，其他方法都是直接调用 HashMap 中的方法。）</p><table><thead><tr><th style="text-align:center">HashMap</th><th style="text-align:center">HashSet</th></tr></thead><tbody><tr><td style="text-align:center">实现了Map接口</td><td style="text-align:center">实现Set接口</td></tr><tr><td style="text-align:center">存储键值对</td><td style="text-align:center">仅存储对象</td></tr><tr><td style="text-align:center">调用put()向map中添加元素</td><td style="text-align:center">调用add()方法向Set中添加元素</td></tr><tr><td style="text-align:center">HashMap使用key计算HashCode</td><td style="text-align:center">HashSet使用成员对象来计算HashCode，<br>对于两个对象来说hashCode可能相同，<br>所以equals()方法来判断对象的相等性，<br>如果两个对象不相同的话，返回false</td></tr><tr><td style="text-align:center">HashMap相对于HashSet来说较快，因为它使用唯一的键获取对象</td><td style="text-align:center">较慢</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;HashMap实现原理：&quot;&gt;&lt;a href=&quot;#HashMap实现原理：&quot; class=&quot;headerlink&quot; title=&quot;HashMap实现原理：&quot;&gt;&lt;/a&gt;HashMap实现原理：&lt;/h4&gt;&lt;h6 id=&quot;jdk1-8以前&quot;&gt;&lt;a href=&quot;#jdk1-
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
